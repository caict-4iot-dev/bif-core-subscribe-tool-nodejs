/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chain_pb = require('./chain_pb.js');
var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.monitor.Authorization', null, global);
goog.exportSymbol('proto.monitor.BroadcastTx', null, global);
goog.exportSymbol('proto.monitor.Cert', null, global);
goog.exportSymbol('proto.monitor.CertExtension', null, global);
goog.exportSymbol('proto.monitor.CertExtensions', null, global);
goog.exportSymbol('proto.monitor.CertPublic', null, global);
goog.exportSymbol('proto.monitor.CertSign', null, global);
goog.exportSymbol('proto.monitor.ChainStatus', null, global);
goog.exportSymbol('proto.monitor.Disc', null, global);
goog.exportSymbol('proto.monitor.Hello', null, global);
goog.exportSymbol('proto.monitor.License', null, global);
goog.exportSymbol('proto.monitor.LicenseMessage', null, global);
goog.exportSymbol('proto.monitor.ListenAddresses', null, global);
goog.exportSymbol('proto.monitor.MONITOR_MESSAGE_TYPE', null, global);
goog.exportSymbol('proto.monitor.NodeInfo', null, global);
goog.exportSymbol('proto.monitor.P2PConnection', null, global);
goog.exportSymbol('proto.monitor.Peer', null, global);
goog.exportSymbol('proto.monitor.Register', null, global);
goog.exportSymbol('proto.monitor.SignAlgorithm', null, global);
goog.exportSymbol('proto.monitor.SystemInfo', null, global);
goog.exportSymbol('proto.monitor.SystemResource', null, global);
goog.exportSymbol('proto.monitor.SystemStatus', null, global);
goog.exportSymbol('proto.monitor.Validity', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Hello = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Hello.displayName = 'proto.monitor.Hello';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Hello.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Hello.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Hello} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Hello.toObject = function (includeInstance, msg) {
        var f, obj = {
            serviceVersion: msg.getServiceVersion(),
            connectionTimeout: msg.getConnectionTimeout(),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Hello}
 */
proto.monitor.Hello.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Hello;
    return proto.monitor.Hello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Hello}
 */
proto.monitor.Hello.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setServiceVersion(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setConnectionTimeout(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Hello} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Hello.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Hello.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Hello.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getServiceVersion();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getConnectionTimeout();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Hello} The clone.
 */
proto.monitor.Hello.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Hello} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 service_version = 1;
 * @return {number}
 */
proto.monitor.Hello.prototype.getServiceVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.Hello.prototype.setServiceVersion = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 connection_timeout = 2;
 * @return {number}
 */
proto.monitor.Hello.prototype.getConnectionTimeout = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.monitor.Hello.prototype.setConnectionTimeout = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.monitor.Hello.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.monitor.Hello.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.SystemInfo.repeatedFields_, null);
};
goog.inherits(proto.monitor.SystemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.SystemInfo.displayName = 'proto.monitor.SystemInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.SystemInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.SystemInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.SystemInfo.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.SystemInfo} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.SystemInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            hostName: msg.getHostName(),
            osVersion: msg.getOsVersion(),
            osBit: msg.getOsBit(),
            systemUptime: msg.getSystemUptime(),
            cpuId: msg.getCpuId(),
            macAddressesList: jspb.Message.getField(msg, 6)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemInfo}
 */
proto.monitor.SystemInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.SystemInfo;
    return proto.monitor.SystemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemInfo}
 */
proto.monitor.SystemInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setHostName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setOsVersion(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setOsBit(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSystemUptime(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setCpuId(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.getMacAddressesList().push(value);
                msg.setMacAddressesList(msg.getMacAddressesList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemInfo.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemInfo.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getHostName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getOsVersion();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getOsBit();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = this.getSystemUptime();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
    f = this.getCpuId();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = this.getMacAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            6,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.SystemInfo} The clone.
 */
proto.monitor.SystemInfo.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.SystemInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string host_name = 1;
 * @return {string}
 */
proto.monitor.SystemInfo.prototype.getHostName = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.SystemInfo.prototype.setHostName = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string os_version = 2;
 * @return {string}
 */
proto.monitor.SystemInfo.prototype.getOsVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.SystemInfo.prototype.setOsVersion = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string os_bit = 3;
 * @return {string}
 */
proto.monitor.SystemInfo.prototype.getOsBit = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.monitor.SystemInfo.prototype.setOsBit = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 system_uptime = 4;
 * @return {number}
 */
proto.monitor.SystemInfo.prototype.getSystemUptime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.monitor.SystemInfo.prototype.setSystemUptime = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional string cpu_id = 5;
 * @return {string}
 */
proto.monitor.SystemInfo.prototype.getCpuId = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.monitor.SystemInfo.prototype.setCpuId = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * repeated string mac_addresses = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.monitor.SystemInfo.prototype.getMacAddressesList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 6));
};


/** @param {Array.<string>} value  */
proto.monitor.SystemInfo.prototype.setMacAddressesList = function (value) {
    jspb.Message.setField(this, 6, value || []);
};


proto.monitor.SystemInfo.prototype.clearMacAddressesList = function () {
    jspb.Message.setField(this, 6, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Register = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Register.displayName = 'proto.monitor.Register';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Register.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Register.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Register} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Register.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: msg.getId(),
            blockchainVersion: msg.getBlockchainVersion(),
            agentVersion: msg.getAgentVersion(),
            networkId: msg.getNetworkId(),
            nodeAddress: msg.getNodeAddress(),
            validatorAddress: msg.getValidatorAddress(),
            processUptime: msg.getProcessUptime(),
            ledgerHeader: (f = msg.getLedgerHeader()) && chain_pb.LedgerHeader.toObject(includeInstance, f),
            system: (f = msg.getSystem()) && proto.monitor.SystemInfo.toObject(includeInstance, f),
            timestamp: msg.getTimestamp(),
            binPath: msg.getBinPath()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Register}
 */
proto.monitor.Register.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Register;
    return proto.monitor.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Register}
 */
proto.monitor.Register.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBlockchainVersion(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setAgentVersion(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNetworkId(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setNodeAddress(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setValidatorAddress(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setProcessUptime(value);
                break;
            case 8:
                var value = new chain_pb.LedgerHeader;
                reader.readMessage(value, chain_pb.LedgerHeader.deserializeBinaryFromReader);
                msg.setLedgerHeader(value);
                break;
            case 9:
                var value = new proto.monitor.SystemInfo;
                reader.readMessage(value, proto.monitor.SystemInfo.deserializeBinaryFromReader);
                msg.setSystem(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            case 11:
                var value = /** @type {string} */ (reader.readString());
                msg.setBinPath(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Register} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Register.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Register.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Register.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getBlockchainVersion();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getAgentVersion();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getNetworkId();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
    f = this.getNodeAddress();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = this.getValidatorAddress();
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        );
    }
    f = this.getProcessUptime();
    if (f !== 0) {
        writer.writeInt64(
            7,
            f
        );
    }
    f = this.getLedgerHeader();
    if (f != null) {
        writer.writeMessage(
            8,
            f,
            chain_pb.LedgerHeader.serializeBinaryToWriter
        );
    }
    f = this.getSystem();
    if (f != null) {
        writer.writeMessage(
            9,
            f,
            proto.monitor.SystemInfo.serializeBinaryToWriter
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            10,
            f
        );
    }
    f = this.getBinPath();
    if (f.length > 0) {
        writer.writeString(
            11,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Register} The clone.
 */
proto.monitor.Register.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Register} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.monitor.Register.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.Register.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string blockchain_version = 2;
 * @return {string}
 */
proto.monitor.Register.prototype.getBlockchainVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.Register.prototype.setBlockchainVersion = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 agent_version = 3;
 * @return {number}
 */
proto.monitor.Register.prototype.getAgentVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.monitor.Register.prototype.setAgentVersion = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 network_id = 4;
 * @return {number}
 */
proto.monitor.Register.prototype.getNetworkId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.monitor.Register.prototype.setNetworkId = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional string node_address = 5;
 * @return {string}
 */
proto.monitor.Register.prototype.getNodeAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.monitor.Register.prototype.setNodeAddress = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional string validator_address = 6;
 * @return {string}
 */
proto.monitor.Register.prototype.getValidatorAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.monitor.Register.prototype.setValidatorAddress = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 process_uptime = 7;
 * @return {number}
 */
proto.monitor.Register.prototype.getProcessUptime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.monitor.Register.prototype.setProcessUptime = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * optional protocol.LedgerHeader ledger_header = 8;
 * @return {proto.protocol.LedgerHeader}
 */
proto.monitor.Register.prototype.getLedgerHeader = function () {
    return /** @type{proto.protocol.LedgerHeader} */ (
        jspb.Message.getWrapperField(this, chain_pb.LedgerHeader, 8));
};


/** @param {proto.protocol.LedgerHeader|undefined} value  */
proto.monitor.Register.prototype.setLedgerHeader = function (value) {
    jspb.Message.setWrapperField(this, 8, value);
};


proto.monitor.Register.prototype.clearLedgerHeader = function () {
    this.setLedgerHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Register.prototype.hasLedgerHeader = function () {
    return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SystemInfo system = 9;
 * @return {proto.monitor.SystemInfo}
 */
proto.monitor.Register.prototype.getSystem = function () {
    return /** @type{proto.monitor.SystemInfo} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SystemInfo, 9));
};


/** @param {proto.monitor.SystemInfo|undefined} value  */
proto.monitor.Register.prototype.setSystem = function (value) {
    jspb.Message.setWrapperField(this, 9, value);
};


proto.monitor.Register.prototype.clearSystem = function () {
    this.setSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Register.prototype.hasSystem = function () {
    return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 timestamp = 10;
 * @return {number}
 */
proto.monitor.Register.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.monitor.Register.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 10, value);
};


/**
 * optional string bin_path = 11;
 * @return {string}
 */
proto.monitor.Register.prototype.getBinPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.monitor.Register.prototype.setBinPath = function (value) {
    jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Peer = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Peer.displayName = 'proto.monitor.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Peer.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Peer.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Peer} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Peer.toObject = function (includeInstance, msg) {
        var f, obj = {
            nodeAddress: msg.getNodeAddress(),
            delay: msg.getDelay(),
            active: msg.getActive(),
            ipAddress: msg.getIpAddress(),
            activeTime: msg.getActiveTime(),
            inBound: msg.getInBound()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Peer}
 */
proto.monitor.Peer.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Peer;
    return proto.monitor.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Peer}
 */
proto.monitor.Peer.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setNodeAddress(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setDelay(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setActive(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setIpAddress(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setActiveTime(value);
                break;
            case 6:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setInBound(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Peer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Peer.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Peer.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Peer.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getNodeAddress();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getDelay();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getActive();
    if (f) {
        writer.writeBool(
            3,
            f
        );
    }
    f = this.getIpAddress();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getActiveTime();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getInBound();
    if (f) {
        writer.writeBool(
            6,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Peer} The clone.
 */
proto.monitor.Peer.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Peer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string node_address = 1;
 * @return {string}
 */
proto.monitor.Peer.prototype.getNodeAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.Peer.prototype.setNodeAddress = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 delay = 2;
 * @return {number}
 */
proto.monitor.Peer.prototype.getDelay = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.monitor.Peer.prototype.setDelay = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional bool active = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.monitor.Peer.prototype.getActive = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.monitor.Peer.prototype.setActive = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string ip_address = 4;
 * @return {string}
 */
proto.monitor.Peer.prototype.getIpAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.monitor.Peer.prototype.setIpAddress = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 active_time = 5;
 * @return {number}
 */
proto.monitor.Peer.prototype.getActiveTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.monitor.Peer.prototype.setActiveTime = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional bool in_bound = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.monitor.Peer.prototype.getInBound = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.monitor.Peer.prototype.setInBound = function (value) {
    jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.P2PConnection = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.P2PConnection.repeatedFields_, null);
};
goog.inherits(proto.monitor.P2PConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.P2PConnection.displayName = 'proto.monitor.P2PConnection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.P2PConnection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.P2PConnection.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.P2PConnection.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.P2PConnection} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.P2PConnection.toObject = function (includeInstance, msg) {
        var f, obj = {
            listenPort: msg.getListenPort(),
            peersList: jspb.Message.toObjectList(msg.getPeersList(),
                proto.monitor.Peer.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.P2PConnection}
 */
proto.monitor.P2PConnection.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.P2PConnection;
    return proto.monitor.P2PConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.P2PConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.P2PConnection}
 */
proto.monitor.P2PConnection.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setListenPort(value);
                break;
            case 2:
                var value = new proto.monitor.Peer;
                reader.readMessage(value, proto.monitor.Peer.deserializeBinaryFromReader);
                msg.getPeersList().push(value);
                msg.setPeersList(msg.getPeersList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.P2PConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.P2PConnection.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.P2PConnection.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.P2PConnection.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getListenPort();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getPeersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.monitor.Peer.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.P2PConnection} The clone.
 */
proto.monitor.P2PConnection.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.P2PConnection} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 listen_port = 1;
 * @return {number}
 */
proto.monitor.P2PConnection.prototype.getListenPort = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.P2PConnection.prototype.setListenPort = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * repeated Peer peers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.monitor.Peer>}
 */
proto.monitor.P2PConnection.prototype.getPeersList = function () {
    return /** @type{!Array.<!proto.monitor.Peer>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.monitor.Peer, 2));
};


/** @param {Array.<!proto.monitor.Peer>} value  */
proto.monitor.P2PConnection.prototype.setPeersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.monitor.P2PConnection.prototype.clearPeersList = function () {
    this.setPeersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.ListenAddresses = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.ListenAddresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.ListenAddresses.displayName = 'proto.monitor.ListenAddresses';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.ListenAddresses.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.ListenAddresses.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.ListenAddresses} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.ListenAddresses.toObject = function (includeInstance, msg) {
        var f, obj = {
            p2pConnection: (f = msg.getP2pConnection()) && proto.monitor.P2PConnection.toObject(includeInstance, f),
            webserver: msg.getWebserver(),
            wsserver: msg.getWsserver()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.ListenAddresses}
 */
proto.monitor.ListenAddresses.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.ListenAddresses;
    return proto.monitor.ListenAddresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.ListenAddresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.ListenAddresses}
 */
proto.monitor.ListenAddresses.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.P2PConnection;
                reader.readMessage(value, proto.monitor.P2PConnection.deserializeBinaryFromReader);
                msg.setP2pConnection(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setWebserver(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setWsserver(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.ListenAddresses} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.ListenAddresses.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.ListenAddresses.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.ListenAddresses.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getP2pConnection();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.P2PConnection.serializeBinaryToWriter
        );
    }
    f = this.getWebserver();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getWsserver();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.ListenAddresses} The clone.
 */
proto.monitor.ListenAddresses.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.ListenAddresses} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional P2PConnection p2p_connection = 1;
 * @return {proto.monitor.P2PConnection}
 */
proto.monitor.ListenAddresses.prototype.getP2pConnection = function () {
    return /** @type{proto.monitor.P2PConnection} */ (
        jspb.Message.getWrapperField(this, proto.monitor.P2PConnection, 1));
};


/** @param {proto.monitor.P2PConnection|undefined} value  */
proto.monitor.ListenAddresses.prototype.setP2pConnection = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.ListenAddresses.prototype.clearP2pConnection = function () {
    this.setP2pConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.ListenAddresses.prototype.hasP2pConnection = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string webserver = 2;
 * @return {string}
 */
proto.monitor.ListenAddresses.prototype.getWebserver = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.ListenAddresses.prototype.setWebserver = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string wsserver = 3;
 * @return {string}
 */
proto.monitor.ListenAddresses.prototype.getWsserver = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.monitor.ListenAddresses.prototype.setWsserver = function (value) {
    jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.ChainStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.ChainStatus.repeatedFields_, null);
};
goog.inherits(proto.monitor.ChainStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.ChainStatus.displayName = 'proto.monitor.ChainStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.ChainStatus.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.ChainStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.ChainStatus.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.ChainStatus} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.ChainStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            ledgerHeader: (f = msg.getLedgerHeader()) && chain_pb.LedgerHeader.toObject(includeInstance, f),
            validatorsList: jspb.Message.getField(msg, 2),
            transactionsCacheSize: msg.getTransactionsCacheSize(),
            accountCount: msg.getAccountCount(),
            listenAddresses: (f = msg.getListenAddresses()) && proto.monitor.ListenAddresses.toObject(includeInstance, f),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.ChainStatus}
 */
proto.monitor.ChainStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.ChainStatus;
    return proto.monitor.ChainStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.ChainStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.ChainStatus}
 */
proto.monitor.ChainStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new chain_pb.LedgerHeader;
                reader.readMessage(value, chain_pb.LedgerHeader.deserializeBinaryFromReader);
                msg.setLedgerHeader(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.getValidatorsList().push(value);
                msg.setValidatorsList(msg.getValidatorsList());
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTransactionsCacheSize(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setAccountCount(value);
                break;
            case 5:
                var value = new proto.monitor.ListenAddresses;
                reader.readMessage(value, proto.monitor.ListenAddresses.deserializeBinaryFromReader);
                msg.setListenAddresses(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.ChainStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.ChainStatus.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.ChainStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.ChainStatus.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getLedgerHeader();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            chain_pb.LedgerHeader.serializeBinaryToWriter
        );
    }
    f = this.getValidatorsList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            2,
            f
        );
    }
    f = this.getTransactionsCacheSize();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getAccountCount();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
    f = this.getListenAddresses();
    if (f != null) {
        writer.writeMessage(
            5,
            f,
            proto.monitor.ListenAddresses.serializeBinaryToWriter
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.ChainStatus} The clone.
 */
proto.monitor.ChainStatus.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.ChainStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional protocol.LedgerHeader ledger_header = 1;
 * @return {proto.protocol.LedgerHeader}
 */
proto.monitor.ChainStatus.prototype.getLedgerHeader = function () {
    return /** @type{proto.protocol.LedgerHeader} */ (
        jspb.Message.getWrapperField(this, chain_pb.LedgerHeader, 1));
};


/** @param {proto.protocol.LedgerHeader|undefined} value  */
proto.monitor.ChainStatus.prototype.setLedgerHeader = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.ChainStatus.prototype.clearLedgerHeader = function () {
    this.setLedgerHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.ChainStatus.prototype.hasLedgerHeader = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string validators = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.monitor.ChainStatus.prototype.getValidatorsList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.monitor.ChainStatus.prototype.setValidatorsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};


proto.monitor.ChainStatus.prototype.clearValidatorsList = function () {
    jspb.Message.setField(this, 2, []);
};


/**
 * optional int64 transactions_cache_size = 3;
 * @return {number}
 */
proto.monitor.ChainStatus.prototype.getTransactionsCacheSize = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.monitor.ChainStatus.prototype.setTransactionsCacheSize = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 account_count = 4;
 * @return {number}
 */
proto.monitor.ChainStatus.prototype.getAccountCount = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.monitor.ChainStatus.prototype.setAccountCount = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional ListenAddresses listen_addresses = 5;
 * @return {proto.monitor.ListenAddresses}
 */
proto.monitor.ChainStatus.prototype.getListenAddresses = function () {
    return /** @type{proto.monitor.ListenAddresses} */ (
        jspb.Message.getWrapperField(this, proto.monitor.ListenAddresses, 5));
};


/** @param {proto.monitor.ListenAddresses|undefined} value  */
proto.monitor.ChainStatus.prototype.setListenAddresses = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};


proto.monitor.ChainStatus.prototype.clearListenAddresses = function () {
    this.setListenAddresses(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.ChainStatus.prototype.hasListenAddresses = function () {
    return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.monitor.ChainStatus.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.monitor.ChainStatus.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemResource = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.SystemResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.SystemResource.displayName = 'proto.monitor.SystemResource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.SystemResource.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.SystemResource.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.SystemResource} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.SystemResource.toObject = function (includeInstance, msg) {
        var f, obj = {
            available: msg.getAvailable(),
            total: msg.getTotal(),
            usedPercent: msg.getUsedPercent()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemResource}
 */
proto.monitor.SystemResource.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.SystemResource;
    return proto.monitor.SystemResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemResource}
 */
proto.monitor.SystemResource.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setAvailable(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTotal(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setUsedPercent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemResource} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemResource.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemResource.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemResource.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getAvailable();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getTotal();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getUsedPercent();
    if (f !== 0.0) {
        writer.writeDouble(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.SystemResource} The clone.
 */
proto.monitor.SystemResource.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.SystemResource} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 available = 1;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getAvailable = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.SystemResource.prototype.setAvailable = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getTotal = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.monitor.SystemResource.prototype.setTotal = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional double used_percent = 3;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getUsedPercent = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.monitor.SystemResource.prototype.setUsedPercent = function (value) {
    jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.SystemStatus.repeatedFields_, null);
};
goog.inherits(proto.monitor.SystemStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.SystemStatus.displayName = 'proto.monitor.SystemStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.SystemStatus.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.SystemStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.SystemStatus.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.SystemStatus} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.SystemStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            cpu: msg.getCpu(),
            memory: (f = msg.getMemory()) && proto.monitor.SystemResource.toObject(includeInstance, f),
            discsList: jspb.Message.toObjectList(msg.getDiscsList(),
                proto.monitor.Disc.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemStatus}
 */
proto.monitor.SystemStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.SystemStatus;
    return proto.monitor.SystemStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemStatus}
 */
proto.monitor.SystemStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setCpu(value);
                break;
            case 2:
                var value = new proto.monitor.SystemResource;
                reader.readMessage(value, proto.monitor.SystemResource.deserializeBinaryFromReader);
                msg.setMemory(value);
                break;
            case 3:
                var value = new proto.monitor.Disc;
                reader.readMessage(value, proto.monitor.Disc.deserializeBinaryFromReader);
                msg.getDiscsList().push(value);
                msg.setDiscsList(msg.getDiscsList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemStatus.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SystemStatus.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getCpu();
    if (f !== 0.0) {
        writer.writeDouble(
            1,
            f
        );
    }
    f = this.getMemory();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.monitor.SystemResource.serializeBinaryToWriter
        );
    }
    f = this.getDiscsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            proto.monitor.Disc.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.SystemStatus} The clone.
 */
proto.monitor.SystemStatus.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.SystemStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double cpu = 1;
 * @return {number}
 */
proto.monitor.SystemStatus.prototype.getCpu = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.SystemStatus.prototype.setCpu = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional SystemResource memory = 2;
 * @return {proto.monitor.SystemResource}
 */
proto.monitor.SystemStatus.prototype.getMemory = function () {
    return /** @type{proto.monitor.SystemResource} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SystemResource, 2));
};


/** @param {proto.monitor.SystemResource|undefined} value  */
proto.monitor.SystemStatus.prototype.setMemory = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.SystemStatus.prototype.clearMemory = function () {
    this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.SystemStatus.prototype.hasMemory = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Disc discs = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.monitor.Disc>}
 */
proto.monitor.SystemStatus.prototype.getDiscsList = function () {
    return /** @type{!Array.<!proto.monitor.Disc>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.monitor.Disc, 3));
};


/** @param {Array.<!proto.monitor.Disc>} value  */
proto.monitor.SystemStatus.prototype.setDiscsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.monitor.SystemStatus.prototype.clearDiscsList = function () {
    this.setDiscsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Disc = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Disc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Disc.displayName = 'proto.monitor.Disc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Disc.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Disc.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Disc} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Disc.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: msg.getPath(),
            resource: (f = msg.getResource()) && proto.monitor.SystemResource.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Disc}
 */
proto.monitor.Disc.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Disc;
    return proto.monitor.Disc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Disc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Disc}
 */
proto.monitor.Disc.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = new proto.monitor.SystemResource;
                reader.readMessage(value, proto.monitor.SystemResource.deserializeBinaryFromReader);
                msg.setResource(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Disc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Disc.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Disc.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Disc.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getPath();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getResource();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.monitor.SystemResource.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Disc} The clone.
 */
proto.monitor.Disc.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Disc} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.monitor.Disc.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.Disc.prototype.setPath = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional SystemResource resource = 2;
 * @return {proto.monitor.SystemResource}
 */
proto.monitor.Disc.prototype.getResource = function () {
    return /** @type{proto.monitor.SystemResource} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SystemResource, 2));
};


/** @param {proto.monitor.SystemResource|undefined} value  */
proto.monitor.Disc.prototype.setResource = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.Disc.prototype.clearResource = function () {
    this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Disc.prototype.hasResource = function () {
    return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SignAlgorithm = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.SignAlgorithm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.SignAlgorithm.displayName = 'proto.monitor.SignAlgorithm';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.SignAlgorithm.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.SignAlgorithm.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.SignAlgorithm} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.SignAlgorithm.toObject = function (includeInstance, msg) {
        var f, obj = {
            algorithm: msg.getAlgorithm(),
            parameter: msg.getParameter()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SignAlgorithm}
 */
proto.monitor.SignAlgorithm.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.SignAlgorithm;
    return proto.monitor.SignAlgorithm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SignAlgorithm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SignAlgorithm}
 */
proto.monitor.SignAlgorithm.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAlgorithm(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setParameter(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SignAlgorithm} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SignAlgorithm.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SignAlgorithm.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.SignAlgorithm.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getAlgorithm();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getParameter();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.SignAlgorithm} The clone.
 */
proto.monitor.SignAlgorithm.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.SignAlgorithm} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string algorithm = 1;
 * @return {string}
 */
proto.monitor.SignAlgorithm.prototype.getAlgorithm = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.SignAlgorithm.prototype.setAlgorithm = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string parameter = 2;
 * @return {string}
 */
proto.monitor.SignAlgorithm.prototype.getParameter = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.SignAlgorithm.prototype.setParameter = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CertSign = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.CertSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.CertSign.displayName = 'proto.monitor.CertSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.CertSign.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.CertSign.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.CertSign} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.CertSign.toObject = function (includeInstance, msg) {
        var f, obj = {
            signAlgorithm: (f = msg.getSignAlgorithm()) && proto.monitor.SignAlgorithm.toObject(includeInstance, f),
            sign: msg.getSign_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CertSign}
 */
proto.monitor.CertSign.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.CertSign;
    return proto.monitor.CertSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CertSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CertSign}
 */
proto.monitor.CertSign.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.SignAlgorithm;
                reader.readMessage(value, proto.monitor.SignAlgorithm.deserializeBinaryFromReader);
                msg.setSignAlgorithm(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSign(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CertSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertSign.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CertSign.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertSign.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSignAlgorithm();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.SignAlgorithm.serializeBinaryToWriter
        );
    }
    f = this.getSign_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.CertSign} The clone.
 */
proto.monitor.CertSign.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.CertSign} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SignAlgorithm sign_algorithm = 1;
 * @return {proto.monitor.SignAlgorithm}
 */
proto.monitor.CertSign.prototype.getSignAlgorithm = function () {
    return /** @type{proto.monitor.SignAlgorithm} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SignAlgorithm, 1));
};


/** @param {proto.monitor.SignAlgorithm|undefined} value  */
proto.monitor.CertSign.prototype.setSignAlgorithm = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.CertSign.prototype.clearSignAlgorithm = function () {
    this.setSignAlgorithm(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.CertSign.prototype.hasSignAlgorithm = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes sign = 2;
 * @return {!(string|Uint8Array)}
 */
proto.monitor.CertSign.prototype.getSign = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes sign = 2;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.monitor.CertSign.prototype.getSign_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSign()));
};


/**
 * optional bytes sign = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.monitor.CertSign.prototype.getSign_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSign()));
};


/** @param {!(string|Uint8Array)} value  */
proto.monitor.CertSign.prototype.setSign = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Validity = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Validity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Validity.displayName = 'proto.monitor.Validity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Validity.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Validity.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Validity} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Validity.toObject = function (includeInstance, msg) {
        var f, obj = {
            notBefore: msg.getNotBefore(),
            notAfter: msg.getNotAfter()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Validity}
 */
proto.monitor.Validity.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Validity;
    return proto.monitor.Validity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Validity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Validity}
 */
proto.monitor.Validity.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNotBefore(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNotAfter(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Validity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Validity.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Validity.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Validity.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getNotBefore();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getNotAfter();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Validity} The clone.
 */
proto.monitor.Validity.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Validity} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 not_before = 1;
 * @return {number}
 */
proto.monitor.Validity.prototype.getNotBefore = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.Validity.prototype.setNotBefore = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 not_after = 2;
 * @return {number}
 */
proto.monitor.Validity.prototype.getNotAfter = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.monitor.Validity.prototype.setNotAfter = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CertPublic = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.CertPublic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.CertPublic.displayName = 'proto.monitor.CertPublic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.CertPublic.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.CertPublic.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.CertPublic} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.CertPublic.toObject = function (includeInstance, msg) {
        var f, obj = {
            algorithm: (f = msg.getAlgorithm()) && proto.monitor.SignAlgorithm.toObject(includeInstance, f),
            modules: msg.getModules_asB64(),
            keySize: msg.getKeySize(),
            exponent: msg.getExponent()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CertPublic}
 */
proto.monitor.CertPublic.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.CertPublic;
    return proto.monitor.CertPublic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CertPublic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CertPublic}
 */
proto.monitor.CertPublic.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.SignAlgorithm;
                reader.readMessage(value, proto.monitor.SignAlgorithm.deserializeBinaryFromReader);
                msg.setAlgorithm(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setModules(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setKeySize(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setExponent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CertPublic} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertPublic.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CertPublic.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertPublic.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getAlgorithm();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.SignAlgorithm.serializeBinaryToWriter
        );
    }
    f = this.getModules_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = this.getKeySize();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = this.getExponent();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.CertPublic} The clone.
 */
proto.monitor.CertPublic.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.CertPublic} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SignAlgorithm algorithm = 1;
 * @return {proto.monitor.SignAlgorithm}
 */
proto.monitor.CertPublic.prototype.getAlgorithm = function () {
    return /** @type{proto.monitor.SignAlgorithm} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SignAlgorithm, 1));
};


/** @param {proto.monitor.SignAlgorithm|undefined} value  */
proto.monitor.CertPublic.prototype.setAlgorithm = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.CertPublic.prototype.clearAlgorithm = function () {
    this.setAlgorithm(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.CertPublic.prototype.hasAlgorithm = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes modules = 2;
 * @return {!(string|Uint8Array)}
 */
proto.monitor.CertPublic.prototype.getModules = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes modules = 2;
 * This is a type-conversion wrapper around `getModules()`
 * @return {string}
 */
proto.monitor.CertPublic.prototype.getModules_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getModules()));
};


/**
 * optional bytes modules = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getModules()`
 * @return {!Uint8Array}
 */
proto.monitor.CertPublic.prototype.getModules_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getModules()));
};


/** @param {!(string|Uint8Array)} value  */
proto.monitor.CertPublic.prototype.setModules = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string key_size = 3;
 * @return {string}
 */
proto.monitor.CertPublic.prototype.getKeySize = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.monitor.CertPublic.prototype.setKeySize = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string exponent = 4;
 * @return {string}
 */
proto.monitor.CertPublic.prototype.getExponent = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.monitor.CertPublic.prototype.setExponent = function (value) {
    jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CertExtension = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.CertExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.CertExtension.displayName = 'proto.monitor.CertExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.CertExtension.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.CertExtension.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.CertExtension} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.CertExtension.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: msg.getName(),
            value: msg.getValue()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CertExtension}
 */
proto.monitor.CertExtension.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.CertExtension;
    return proto.monitor.CertExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CertExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CertExtension}
 */
proto.monitor.CertExtension.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CertExtension} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertExtension.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CertExtension.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertExtension.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getValue();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.CertExtension} The clone.
 */
proto.monitor.CertExtension.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.CertExtension} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.monitor.CertExtension.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.CertExtension.prototype.setName = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.monitor.CertExtension.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.CertExtension.prototype.setValue = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CertExtensions = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.CertExtensions.repeatedFields_, null);
};
goog.inherits(proto.monitor.CertExtensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.CertExtensions.displayName = 'proto.monitor.CertExtensions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.CertExtensions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.CertExtensions.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.CertExtensions.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.CertExtensions} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.CertExtensions.toObject = function (includeInstance, msg) {
        var f, obj = {
            isCa: msg.getIsCa(),
            certExtensionsList: jspb.Message.toObjectList(msg.getCertExtensionsList(),
                proto.monitor.CertExtension.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CertExtensions}
 */
proto.monitor.CertExtensions.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.CertExtensions;
    return proto.monitor.CertExtensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CertExtensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CertExtensions}
 */
proto.monitor.CertExtensions.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsCa(value);
                break;
            case 2:
                var value = new proto.monitor.CertExtension;
                reader.readMessage(value, proto.monitor.CertExtension.deserializeBinaryFromReader);
                msg.getCertExtensionsList().push(value);
                msg.setCertExtensionsList(msg.getCertExtensionsList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CertExtensions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertExtensions.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CertExtensions.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.CertExtensions.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getIsCa();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
    f = this.getCertExtensionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.monitor.CertExtension.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.CertExtensions} The clone.
 */
proto.monitor.CertExtensions.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.CertExtensions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool is_ca = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.monitor.CertExtensions.prototype.getIsCa = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.monitor.CertExtensions.prototype.setIsCa = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * repeated CertExtension cert_extensions = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.monitor.CertExtension>}
 */
proto.monitor.CertExtensions.prototype.getCertExtensionsList = function () {
    return /** @type{!Array.<!proto.monitor.CertExtension>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.monitor.CertExtension, 2));
};


/** @param {Array.<!proto.monitor.CertExtension>} value  */
proto.monitor.CertExtensions.prototype.setCertExtensionsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.monitor.CertExtensions.prototype.clearCertExtensionsList = function () {
    this.setCertExtensionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Cert = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Cert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Cert.displayName = 'proto.monitor.Cert';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Cert.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Cert.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Cert} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Cert.toObject = function (includeInstance, msg) {
        var f, obj = {
            version: msg.getVersion(),
            id: msg.getId(),
            sign: (f = msg.getSign()) && proto.monitor.CertSign.toObject(includeInstance, f),
            issuer: msg.getIssuer(),
            validity: (f = msg.getValidity()) && proto.monitor.Validity.toObject(includeInstance, f),
            subject: msg.getSubject(),
            certPublic: (f = msg.getCertPublic()) && proto.monitor.CertPublic.toObject(includeInstance, f),
            certExtensions: (f = msg.getCertExtensions()) && proto.monitor.CertExtensions.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Cert}
 */
proto.monitor.Cert.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Cert;
    return proto.monitor.Cert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Cert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Cert}
 */
proto.monitor.Cert.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 3:
                var value = new proto.monitor.CertSign;
                reader.readMessage(value, proto.monitor.CertSign.deserializeBinaryFromReader);
                msg.setSign(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setIssuer(value);
                break;
            case 5:
                var value = new proto.monitor.Validity;
                reader.readMessage(value, proto.monitor.Validity.deserializeBinaryFromReader);
                msg.setValidity(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setSubject(value);
                break;
            case 7:
                var value = new proto.monitor.CertPublic;
                reader.readMessage(value, proto.monitor.CertPublic.deserializeBinaryFromReader);
                msg.setCertPublic(value);
                break;
            case 8:
                var value = new proto.monitor.CertExtensions;
                reader.readMessage(value, proto.monitor.CertExtensions.deserializeBinaryFromReader);
                msg.setCertExtensions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Cert} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Cert.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Cert.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Cert.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getVersion();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getId();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getSign();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.monitor.CertSign.serializeBinaryToWriter
        );
    }
    f = this.getIssuer();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getValidity();
    if (f != null) {
        writer.writeMessage(
            5,
            f,
            proto.monitor.Validity.serializeBinaryToWriter
        );
    }
    f = this.getSubject();
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        );
    }
    f = this.getCertPublic();
    if (f != null) {
        writer.writeMessage(
            7,
            f,
            proto.monitor.CertPublic.serializeBinaryToWriter
        );
    }
    f = this.getCertExtensions();
    if (f != null) {
        writer.writeMessage(
            8,
            f,
            proto.monitor.CertExtensions.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Cert} The clone.
 */
proto.monitor.Cert.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Cert} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.monitor.Cert.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.Cert.prototype.setVersion = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.monitor.Cert.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.Cert.prototype.setId = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional CertSign sign = 3;
 * @return {proto.monitor.CertSign}
 */
proto.monitor.Cert.prototype.getSign = function () {
    return /** @type{proto.monitor.CertSign} */ (
        jspb.Message.getWrapperField(this, proto.monitor.CertSign, 3));
};


/** @param {proto.monitor.CertSign|undefined} value  */
proto.monitor.Cert.prototype.setSign = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.monitor.Cert.prototype.clearSign = function () {
    this.setSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Cert.prototype.hasSign = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string issuer = 4;
 * @return {string}
 */
proto.monitor.Cert.prototype.getIssuer = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.monitor.Cert.prototype.setIssuer = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional Validity validity = 5;
 * @return {proto.monitor.Validity}
 */
proto.monitor.Cert.prototype.getValidity = function () {
    return /** @type{proto.monitor.Validity} */ (
        jspb.Message.getWrapperField(this, proto.monitor.Validity, 5));
};


/** @param {proto.monitor.Validity|undefined} value  */
proto.monitor.Cert.prototype.setValidity = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};


proto.monitor.Cert.prototype.clearValidity = function () {
    this.setValidity(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Cert.prototype.hasValidity = function () {
    return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string subject = 6;
 * @return {string}
 */
proto.monitor.Cert.prototype.getSubject = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.monitor.Cert.prototype.setSubject = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional CertPublic cert_public = 7;
 * @return {proto.monitor.CertPublic}
 */
proto.monitor.Cert.prototype.getCertPublic = function () {
    return /** @type{proto.monitor.CertPublic} */ (
        jspb.Message.getWrapperField(this, proto.monitor.CertPublic, 7));
};


/** @param {proto.monitor.CertPublic|undefined} value  */
proto.monitor.Cert.prototype.setCertPublic = function (value) {
    jspb.Message.setWrapperField(this, 7, value);
};


proto.monitor.Cert.prototype.clearCertPublic = function () {
    this.setCertPublic(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Cert.prototype.hasCertPublic = function () {
    return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CertExtensions cert_extensions = 8;
 * @return {proto.monitor.CertExtensions}
 */
proto.monitor.Cert.prototype.getCertExtensions = function () {
    return /** @type{proto.monitor.CertExtensions} */ (
        jspb.Message.getWrapperField(this, proto.monitor.CertExtensions, 8));
};


/** @param {proto.monitor.CertExtensions|undefined} value  */
proto.monitor.Cert.prototype.setCertExtensions = function (value) {
    jspb.Message.setWrapperField(this, 8, value);
};


proto.monitor.Cert.prototype.clearCertExtensions = function () {
    this.setCertExtensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Cert.prototype.hasCertExtensions = function () {
    return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.LicenseMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.LicenseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.LicenseMessage.displayName = 'proto.monitor.LicenseMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.LicenseMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.LicenseMessage.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.LicenseMessage} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.LicenseMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: msg.getId(),
            networkId: msg.getNetworkId(),
            authority: msg.getAuthority(),
            subject: msg.getSubject(),
            certificateId: msg.getCertificateId(),
            hardware: msg.getHardware(),
            time: msg.getTime(),
            extraData: msg.getExtraData(),
            version: msg.getVersion()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.LicenseMessage}
 */
proto.monitor.LicenseMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.LicenseMessage;
    return proto.monitor.LicenseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.LicenseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.LicenseMessage}
 */
proto.monitor.LicenseMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNetworkId(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setAuthority(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setSubject(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setCertificateId(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setHardware(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setTime(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setExtraData(value);
                break;
            case 9:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.LicenseMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.LicenseMessage.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.LicenseMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.LicenseMessage.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getNetworkId();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getAuthority();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = this.getSubject();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getCertificateId();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = this.getHardware();
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        );
    }
    f = this.getTime();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
    f = this.getExtraData();
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        );
    }
    f = this.getVersion();
    if (f.length > 0) {
        writer.writeString(
            9,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.LicenseMessage} The clone.
 */
proto.monitor.LicenseMessage.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.LicenseMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 network_id = 2;
 * @return {number}
 */
proto.monitor.LicenseMessage.prototype.getNetworkId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.monitor.LicenseMessage.prototype.setNetworkId = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string authority = 3;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getAuthority = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setAuthority = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string subject = 4;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getSubject = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setSubject = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional string certificate_id = 5;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getCertificateId = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setCertificateId = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional string hardware = 6;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getHardware = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setHardware = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional string time = 7;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getTime = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setTime = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * optional string extra_data = 8;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getExtraData = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setExtraData = function (value) {
    jspb.Message.setField(this, 8, value);
};


/**
 * optional string version = 9;
 * @return {string}
 */
proto.monitor.LicenseMessage.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.monitor.LicenseMessage.prototype.setVersion = function (value) {
    jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.License = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.License, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.License.displayName = 'proto.monitor.License';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.License.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.License.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.License} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.License.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: (f = msg.getMessage()) && proto.monitor.LicenseMessage.toObject(includeInstance, f),
            verification: (f = msg.getVerification()) && common_pb.Signature.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.License}
 */
proto.monitor.License.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.License;
    return proto.monitor.License.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.License} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.License}
 */
proto.monitor.License.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.LicenseMessage;
                reader.readMessage(value, proto.monitor.LicenseMessage.deserializeBinaryFromReader);
                msg.setMessage(value);
                break;
            case 2:
                var value = new common_pb.Signature;
                reader.readMessage(value, common_pb.Signature.deserializeBinaryFromReader);
                msg.setVerification(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.License} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.License.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.License.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.License.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getMessage();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.LicenseMessage.serializeBinaryToWriter
        );
    }
    f = this.getVerification();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            common_pb.Signature.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.License} The clone.
 */
proto.monitor.License.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.License} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional LicenseMessage message = 1;
 * @return {proto.monitor.LicenseMessage}
 */
proto.monitor.License.prototype.getMessage = function () {
    return /** @type{proto.monitor.LicenseMessage} */ (
        jspb.Message.getWrapperField(this, proto.monitor.LicenseMessage, 1));
};


/** @param {proto.monitor.LicenseMessage|undefined} value  */
proto.monitor.License.prototype.setMessage = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.License.prototype.clearMessage = function () {
    this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.License.prototype.hasMessage = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protocol.Signature verification = 2;
 * @return {proto.protocol.Signature}
 */
proto.monitor.License.prototype.getVerification = function () {
    return /** @type{proto.protocol.Signature} */ (
        jspb.Message.getWrapperField(this, common_pb.Signature, 2));
};


/** @param {proto.protocol.Signature|undefined} value  */
proto.monitor.License.prototype.setVerification = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.License.prototype.clearVerification = function () {
    this.setVerification(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.License.prototype.hasVerification = function () {
    return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Authorization = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Authorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.Authorization.displayName = 'proto.monitor.Authorization';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.Authorization.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.Authorization.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.Authorization} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.Authorization.toObject = function (includeInstance, msg) {
        var f, obj = {
            verify: (f = msg.getVerify()) && proto.monitor.Cert.toObject(includeInstance, f),
            entity: (f = msg.getEntity()) && proto.monitor.Cert.toObject(includeInstance, f),
            license: (f = msg.getLicense()) && proto.monitor.License.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Authorization}
 */
proto.monitor.Authorization.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.Authorization;
    return proto.monitor.Authorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Authorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Authorization}
 */
proto.monitor.Authorization.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.Cert;
                reader.readMessage(value, proto.monitor.Cert.deserializeBinaryFromReader);
                msg.setVerify(value);
                break;
            case 2:
                var value = new proto.monitor.Cert;
                reader.readMessage(value, proto.monitor.Cert.deserializeBinaryFromReader);
                msg.setEntity(value);
                break;
            case 3:
                var value = new proto.monitor.License;
                reader.readMessage(value, proto.monitor.License.deserializeBinaryFromReader);
                msg.setLicense(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Authorization} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Authorization.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Authorization.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.Authorization.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getVerify();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.Cert.serializeBinaryToWriter
        );
    }
    f = this.getEntity();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.monitor.Cert.serializeBinaryToWriter
        );
    }
    f = this.getLicense();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.monitor.License.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.Authorization} The clone.
 */
proto.monitor.Authorization.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.Authorization} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Cert verify = 1;
 * @return {proto.monitor.Cert}
 */
proto.monitor.Authorization.prototype.getVerify = function () {
    return /** @type{proto.monitor.Cert} */ (
        jspb.Message.getWrapperField(this, proto.monitor.Cert, 1));
};


/** @param {proto.monitor.Cert|undefined} value  */
proto.monitor.Authorization.prototype.setVerify = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.Authorization.prototype.clearVerify = function () {
    this.setVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Authorization.prototype.hasVerify = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Cert entity = 2;
 * @return {proto.monitor.Cert}
 */
proto.monitor.Authorization.prototype.getEntity = function () {
    return /** @type{proto.monitor.Cert} */ (
        jspb.Message.getWrapperField(this, proto.monitor.Cert, 2));
};


/** @param {proto.monitor.Cert|undefined} value  */
proto.monitor.Authorization.prototype.setEntity = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.Authorization.prototype.clearEntity = function () {
    this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Authorization.prototype.hasEntity = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional License license = 3;
 * @return {proto.monitor.License}
 */
proto.monitor.Authorization.prototype.getLicense = function () {
    return /** @type{proto.monitor.License} */ (
        jspb.Message.getWrapperField(this, proto.monitor.License, 3));
};


/** @param {proto.monitor.License|undefined} value  */
proto.monitor.Authorization.prototype.setLicense = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.monitor.Authorization.prototype.clearLicense = function () {
    this.setLicense(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.Authorization.prototype.hasLicense = function () {
    return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.NodeInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.NodeInfo.displayName = 'proto.monitor.NodeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.NodeInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.NodeInfo.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.NodeInfo} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.NodeInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            chainStatus: (f = msg.getChainStatus()) && proto.monitor.ChainStatus.toObject(includeInstance, f),
            systemStatus: (f = msg.getSystemStatus()) && proto.monitor.SystemStatus.toObject(includeInstance, f),
            authorization: (f = msg.getAuthorization()) && proto.monitor.Authorization.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.NodeInfo}
 */
proto.monitor.NodeInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.NodeInfo;
    return proto.monitor.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.NodeInfo}
 */
proto.monitor.NodeInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.monitor.ChainStatus;
                reader.readMessage(value, proto.monitor.ChainStatus.deserializeBinaryFromReader);
                msg.setChainStatus(value);
                break;
            case 2:
                var value = new proto.monitor.SystemStatus;
                reader.readMessage(value, proto.monitor.SystemStatus.deserializeBinaryFromReader);
                msg.setSystemStatus(value);
                break;
            case 3:
                var value = new proto.monitor.Authorization;
                reader.readMessage(value, proto.monitor.Authorization.deserializeBinaryFromReader);
                msg.setAuthorization(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.NodeInfo.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.NodeInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.NodeInfo.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getChainStatus();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.monitor.ChainStatus.serializeBinaryToWriter
        );
    }
    f = this.getSystemStatus();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.monitor.SystemStatus.serializeBinaryToWriter
        );
    }
    f = this.getAuthorization();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.monitor.Authorization.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.NodeInfo} The clone.
 */
proto.monitor.NodeInfo.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.NodeInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ChainStatus chain_status = 1;
 * @return {proto.monitor.ChainStatus}
 */
proto.monitor.NodeInfo.prototype.getChainStatus = function () {
    return /** @type{proto.monitor.ChainStatus} */ (
        jspb.Message.getWrapperField(this, proto.monitor.ChainStatus, 1));
};


/** @param {proto.monitor.ChainStatus|undefined} value  */
proto.monitor.NodeInfo.prototype.setChainStatus = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.NodeInfo.prototype.clearChainStatus = function () {
    this.setChainStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.NodeInfo.prototype.hasChainStatus = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SystemStatus system_status = 2;
 * @return {proto.monitor.SystemStatus}
 */
proto.monitor.NodeInfo.prototype.getSystemStatus = function () {
    return /** @type{proto.monitor.SystemStatus} */ (
        jspb.Message.getWrapperField(this, proto.monitor.SystemStatus, 2));
};


/** @param {proto.monitor.SystemStatus|undefined} value  */
proto.monitor.NodeInfo.prototype.setSystemStatus = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.NodeInfo.prototype.clearSystemStatus = function () {
    this.setSystemStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.NodeInfo.prototype.hasSystemStatus = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Authorization authorization = 3;
 * @return {proto.monitor.Authorization}
 */
proto.monitor.NodeInfo.prototype.getAuthorization = function () {
    return /** @type{proto.monitor.Authorization} */ (
        jspb.Message.getWrapperField(this, proto.monitor.Authorization, 3));
};


/** @param {proto.monitor.Authorization|undefined} value  */
proto.monitor.NodeInfo.prototype.setAuthorization = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.monitor.NodeInfo.prototype.clearAuthorization = function () {
    this.setAuthorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.monitor.NodeInfo.prototype.hasAuthorization = function () {
    return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.BroadcastTx = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.BroadcastTx.repeatedFields_, null);
};
goog.inherits(proto.monitor.BroadcastTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.monitor.BroadcastTx.displayName = 'proto.monitor.BroadcastTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.BroadcastTx.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.monitor.BroadcastTx.prototype.toObject = function (opt_includeInstance) {
        return proto.monitor.BroadcastTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.monitor.BroadcastTx} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.monitor.BroadcastTx.toObject = function (includeInstance, msg) {
        var f, obj = {
            networkId: msg.getNetworkId(),
            sourceNodeAddress: msg.getSourceNodeAddress(),
            targetNodeAddressesList: jspb.Message.getField(msg, 3),
            txHash: msg.getTxHash(),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.BroadcastTx}
 */
proto.monitor.BroadcastTx.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.monitor.BroadcastTx;
    return proto.monitor.BroadcastTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.BroadcastTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.BroadcastTx}
 */
proto.monitor.BroadcastTx.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNetworkId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSourceNodeAddress(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.getTargetNodeAddressesList().push(value);
                msg.setTargetNodeAddressesList(msg.getTargetNodeAddressesList());
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setTxHash(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.monitor.BroadcastTx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.BroadcastTx.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.BroadcastTx.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.monitor.BroadcastTx.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getNetworkId();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSourceNodeAddress();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getTargetNodeAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            3,
            f
        );
    }
    f = this.getTxHash();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.monitor.BroadcastTx} The clone.
 */
proto.monitor.BroadcastTx.prototype.cloneMessage = function () {
    return /** @type {!proto.monitor.BroadcastTx} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 network_id = 1;
 * @return {number}
 */
proto.monitor.BroadcastTx.prototype.getNetworkId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.monitor.BroadcastTx.prototype.setNetworkId = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string source_node_address = 2;
 * @return {string}
 */
proto.monitor.BroadcastTx.prototype.getSourceNodeAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.monitor.BroadcastTx.prototype.setSourceNodeAddress = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * repeated string target_node_addresses = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.monitor.BroadcastTx.prototype.getTargetNodeAddressesList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.monitor.BroadcastTx.prototype.setTargetNodeAddressesList = function (value) {
    jspb.Message.setField(this, 3, value || []);
};


proto.monitor.BroadcastTx.prototype.clearTargetNodeAddressesList = function () {
    jspb.Message.setField(this, 3, []);
};


/**
 * optional string tx_hash = 4;
 * @return {string}
 */
proto.monitor.BroadcastTx.prototype.getTxHash = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.monitor.BroadcastTx.prototype.setTxHash = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.monitor.BroadcastTx.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.monitor.BroadcastTx.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.monitor.MONITOR_MESSAGE_TYPE = {
    MONITOR_MSGTYPE_NONE: 0,
    MONITOR_MSGTYPE_HELLO: 30,
    MONITOR_MSGTYPE_REGISTER: 31,
    MONITOR_MSGTYPE_SYSTEM: 34,
    MONITOR_MSGTYPE_CHAIN: 40,
    MONITOR_MSGTYPE_AUTHORIZATION: 41,
    MONITOR_MSGTYPE_NODE_INFO: 42,
    MONITOR_MSGTYPE_BROADCAST: 43
};

goog.object.extend(exports, proto.monitor);
