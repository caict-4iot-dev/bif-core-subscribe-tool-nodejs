/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var chain_pb = require('./chain_pb.js');
goog.exportSymbol('proto.protocol.ChainContractLog', null, global);
goog.exportSymbol('proto.protocol.ChainHello', null, global);
goog.exportSymbol('proto.protocol.ChainMessageType', null, global);
goog.exportSymbol('proto.protocol.ChainPeerMessage', null, global);
goog.exportSymbol('proto.protocol.ChainResponse', null, global);
goog.exportSymbol('proto.protocol.ChainStatus', null, global);
goog.exportSymbol('proto.protocol.ChainSubscribeTx', null, global);
goog.exportSymbol('proto.protocol.ChainTxStatus', null, global);
goog.exportSymbol('proto.protocol.ChainTxStatus.TxStatus', null, global);
goog.exportSymbol('proto.protocol.DontHave', null, global);
goog.exportSymbol('proto.protocol.EntryList', null, global);
goog.exportSymbol('proto.protocol.GetLedgers', null, global);
goog.exportSymbol('proto.protocol.Hello', null, global);
goog.exportSymbol('proto.protocol.HelloResponse', null, global);
goog.exportSymbol('proto.protocol.LedgerTxs', null, global);
goog.exportSymbol('proto.protocol.LedgerUpgradeNotify', null, global);
goog.exportSymbol('proto.protocol.Ledgers', null, global);
goog.exportSymbol('proto.protocol.Ledgers.SyncCode', null, global);
goog.exportSymbol('proto.protocol.OVERLAY_MESSAGE_TYPE', null, global);
goog.exportSymbol('proto.protocol.Peer', null, global);
goog.exportSymbol('proto.protocol.Peers', null, global);
goog.exportSymbol('proto.protocol.TransactionEnvResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Hello = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Hello.displayName = 'proto.protocol.Hello';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Hello.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Hello.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Hello} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Hello.toObject = function (includeInstance, msg) {
        var f, obj = {
            networkId: msg.getNetworkId(),
            ledgerVersion: msg.getLedgerVersion(),
            overlayVersion: msg.getOverlayVersion(),
            buchainVersion: msg.getBuchainVersion(),
            listeningPort: msg.getListeningPort(),
            nodeAddress: msg.getNodeAddress(),
            nodeRand: msg.getNodeRand(),
            license: msg.getLicense()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Hello}
 */
proto.protocol.Hello.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Hello;
    return proto.protocol.Hello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Hello}
 */
proto.protocol.Hello.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNetworkId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLedgerVersion(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setOverlayVersion(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setBuchainVersion(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setListeningPort(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setNodeAddress(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setNodeRand(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setLicense(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Hello} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Hello.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Hello.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Hello.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getNetworkId();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getLedgerVersion();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getOverlayVersion();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getBuchainVersion();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getListeningPort();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getNodeAddress();
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        );
    }
    f = this.getNodeRand();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
    f = this.getLicense();
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Hello} The clone.
 */
proto.protocol.Hello.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Hello} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 network_id = 1;
 * @return {number}
 */
proto.protocol.Hello.prototype.getNetworkId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.Hello.prototype.setNetworkId = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 ledger_version = 2;
 * @return {number}
 */
proto.protocol.Hello.prototype.getLedgerVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.Hello.prototype.setLedgerVersion = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 overlay_version = 3;
 * @return {number}
 */
proto.protocol.Hello.prototype.getOverlayVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.Hello.prototype.setOverlayVersion = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string buchain_version = 4;
 * @return {string}
 */
proto.protocol.Hello.prototype.getBuchainVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.protocol.Hello.prototype.setBuchainVersion = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 listening_port = 5;
 * @return {number}
 */
proto.protocol.Hello.prototype.getListeningPort = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.Hello.prototype.setListeningPort = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional string node_address = 6;
 * @return {string}
 */
proto.protocol.Hello.prototype.getNodeAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.protocol.Hello.prototype.setNodeAddress = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional string node_rand = 7;
 * @return {string}
 */
proto.protocol.Hello.prototype.getNodeRand = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.protocol.Hello.prototype.setNodeRand = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * optional string license = 8;
 * @return {string}
 */
proto.protocol.Hello.prototype.getLicense = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.protocol.Hello.prototype.setLicense = function (value) {
    jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.HelloResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.HelloResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.HelloResponse.displayName = 'proto.protocol.HelloResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.HelloResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.HelloResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.HelloResponse} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.HelloResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            errorCode: msg.getErrorCode(),
            errorDesc: msg.getErrorDesc()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.HelloResponse}
 */
proto.protocol.HelloResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.HelloResponse;
    return proto.protocol.HelloResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.HelloResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.HelloResponse}
 */
proto.protocol.HelloResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.protocol.ERRORCODE} */ (reader.readEnum());
                msg.setErrorCode(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setErrorDesc(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.HelloResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.HelloResponse.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.HelloResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.HelloResponse.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getErrorCode();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
    f = this.getErrorDesc();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.HelloResponse} The clone.
 */
proto.protocol.HelloResponse.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.HelloResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ERRORCODE error_code = 1;
 * @return {!proto.protocol.ERRORCODE}
 */
proto.protocol.HelloResponse.prototype.getErrorCode = function () {
    return /** @type {!proto.protocol.ERRORCODE} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.protocol.ERRORCODE} value  */
proto.protocol.HelloResponse.prototype.setErrorCode = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string error_desc = 2;
 * @return {string}
 */
proto.protocol.HelloResponse.prototype.getErrorDesc = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.protocol.HelloResponse.prototype.setErrorDesc = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Peer = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Peer.displayName = 'proto.protocol.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Peer.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Peer.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Peer} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Peer.toObject = function (includeInstance, msg) {
        var f, obj = {
            ip: msg.getIp(),
            port: msg.getPort(),
            numFailures: msg.getNumFailures(),
            nextAttemptTime: msg.getNextAttemptTime(),
            activeTime: msg.getActiveTime(),
            connectionId: msg.getConnectionId()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Peer}
 */
proto.protocol.Peer.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Peer;
    return proto.protocol.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Peer}
 */
proto.protocol.Peer.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setIp(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setPort(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNumFailures(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNextAttemptTime(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setActiveTime(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setConnectionId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Peer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Peer.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Peer.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Peer.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getIp();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getPort();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getNumFailures();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getNextAttemptTime();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
    f = this.getActiveTime();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getConnectionId();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Peer} The clone.
 */
proto.protocol.Peer.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Peer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.protocol.Peer.prototype.getIp = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.protocol.Peer.prototype.setIp = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 port = 2;
 * @return {number}
 */
proto.protocol.Peer.prototype.getPort = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.Peer.prototype.setPort = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 num_failures = 3;
 * @return {number}
 */
proto.protocol.Peer.prototype.getNumFailures = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.Peer.prototype.setNumFailures = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 next_attempt_time = 4;
 * @return {number}
 */
proto.protocol.Peer.prototype.getNextAttemptTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.protocol.Peer.prototype.setNextAttemptTime = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 active_time = 5;
 * @return {number}
 */
proto.protocol.Peer.prototype.getActiveTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.Peer.prototype.setActiveTime = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 connection_id = 6;
 * @return {number}
 */
proto.protocol.Peer.prototype.getConnectionId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.protocol.Peer.prototype.setConnectionId = function (value) {
    jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Peers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.Peers.repeatedFields_, null);
};
goog.inherits(proto.protocol.Peers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Peers.displayName = 'proto.protocol.Peers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Peers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Peers.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Peers.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Peers} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Peers.toObject = function (includeInstance, msg) {
        var f, obj = {
            peersList: jspb.Message.toObjectList(msg.getPeersList(),
                proto.protocol.Peer.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Peers}
 */
proto.protocol.Peers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Peers;
    return proto.protocol.Peers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Peers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Peers}
 */
proto.protocol.Peers.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.Peer;
                reader.readMessage(value, proto.protocol.Peer.deserializeBinaryFromReader);
                msg.getPeersList().push(value);
                msg.setPeersList(msg.getPeersList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Peers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Peers.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Peers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Peers.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getPeersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.protocol.Peer.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Peers} The clone.
 */
proto.protocol.Peers.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Peers} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Peer peers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Peer>}
 */
proto.protocol.Peers.prototype.getPeersList = function () {
    return /** @type{!Array.<!proto.protocol.Peer>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.Peer, 1));
};


/** @param {Array.<!proto.protocol.Peer>} value  */
proto.protocol.Peers.prototype.setPeersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protocol.Peers.prototype.clearPeersList = function () {
    this.setPeersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.GetLedgers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.GetLedgers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.GetLedgers.displayName = 'proto.protocol.GetLedgers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.GetLedgers.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.GetLedgers.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.GetLedgers} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.GetLedgers.toObject = function (includeInstance, msg) {
        var f, obj = {
            begin: msg.getBegin(),
            end: msg.getEnd(),
            timestamp: msg.getTimestamp(),
            chainId: msg.getChainId()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.GetLedgers}
 */
proto.protocol.GetLedgers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.GetLedgers;
    return proto.protocol.GetLedgers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.GetLedgers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.GetLedgers}
 */
proto.protocol.GetLedgers.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setBegin(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setEnd(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setChainId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.GetLedgers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.GetLedgers.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.GetLedgers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.GetLedgers.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getBegin();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getEnd();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getChainId();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.GetLedgers} The clone.
 */
proto.protocol.GetLedgers.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.GetLedgers} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 begin = 1;
 * @return {number}
 */
proto.protocol.GetLedgers.prototype.getBegin = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.GetLedgers.prototype.setBegin = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 end = 2;
 * @return {number}
 */
proto.protocol.GetLedgers.prototype.getEnd = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.GetLedgers.prototype.setEnd = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.protocol.GetLedgers.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.GetLedgers.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 chain_id = 4;
 * @return {number}
 */
proto.protocol.GetLedgers.prototype.getChainId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.protocol.GetLedgers.prototype.setChainId = function (value) {
    jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Ledgers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.Ledgers.repeatedFields_, null);
};
goog.inherits(proto.protocol.Ledgers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Ledgers.displayName = 'proto.protocol.Ledgers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Ledgers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Ledgers.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Ledgers.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Ledgers} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Ledgers.toObject = function (includeInstance, msg) {
        var f, obj = {
            valuesList: jspb.Message.toObjectList(msg.getValuesList(),
                chain_pb.ConsensusValue.toObject, includeInstance),
            syncCode: msg.getSyncCode(),
            maxSeq: msg.getMaxSeq(),
            proof: msg.getProof_asB64(),
            chainId: msg.getChainId()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Ledgers}
 */
proto.protocol.Ledgers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Ledgers;
    return proto.protocol.Ledgers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Ledgers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Ledgers}
 */
proto.protocol.Ledgers.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new chain_pb.ConsensusValue;
                reader.readMessage(value, chain_pb.ConsensusValue.deserializeBinaryFromReader);
                msg.getValuesList().push(value);
                msg.setValuesList(msg.getValuesList());
                break;
            case 2:
                var value = /** @type {!proto.protocol.Ledgers.SyncCode} */ (reader.readEnum());
                msg.setSyncCode(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setMaxSeq(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setProof(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setChainId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Ledgers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Ledgers.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Ledgers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Ledgers.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getValuesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            chain_pb.ConsensusValue.serializeBinaryToWriter
        );
    }
    f = this.getSyncCode();
    if (f !== 0.0) {
        writer.writeEnum(
            2,
            f
        );
    }
    f = this.getMaxSeq();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getProof_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
    f = this.getChainId();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Ledgers} The clone.
 */
proto.protocol.Ledgers.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Ledgers} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ConsensusValue values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.ConsensusValue>}
 */
proto.protocol.Ledgers.prototype.getValuesList = function () {
    return /** @type{!Array.<!proto.protocol.ConsensusValue>} */ (
        jspb.Message.getRepeatedWrapperField(this, chain_pb.ConsensusValue, 1));
};


/** @param {Array.<!proto.protocol.ConsensusValue>} value  */
proto.protocol.Ledgers.prototype.setValuesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protocol.Ledgers.prototype.clearValuesList = function () {
    this.setValuesList([]);
};


/**
 * optional SyncCode sync_code = 2;
 * @return {!proto.protocol.Ledgers.SyncCode}
 */
proto.protocol.Ledgers.prototype.getSyncCode = function () {
    return /** @type {!proto.protocol.Ledgers.SyncCode} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.protocol.Ledgers.SyncCode} value  */
proto.protocol.Ledgers.prototype.setSyncCode = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 max_seq = 3;
 * @return {number}
 */
proto.protocol.Ledgers.prototype.getMaxSeq = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.Ledgers.prototype.setMaxSeq = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes proof = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Ledgers.prototype.getProof = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes proof = 4;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.protocol.Ledgers.prototype.getProof_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getProof()));
};


/**
 * optional bytes proof = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.protocol.Ledgers.prototype.getProof_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getProof()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.Ledgers.prototype.setProof = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 chain_id = 5;
 * @return {number}
 */
proto.protocol.Ledgers.prototype.getChainId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.Ledgers.prototype.setChainId = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.protocol.Ledgers.SyncCode = {
    OK: 0,
    OUT_OF_SYNC: 1,
    OUT_OF_LEDGERS: 2,
    BUSY: 3,
    REFUSE: 4,
    INTERNAL: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DontHave = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DontHave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.DontHave.displayName = 'proto.protocol.DontHave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.DontHave.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.DontHave.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.DontHave} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.DontHave.toObject = function (includeInstance, msg) {
        var f, obj = {
            type: msg.getType(),
            hash: msg.getHash_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DontHave}
 */
proto.protocol.DontHave.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.DontHave;
    return proto.protocol.DontHave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DontHave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DontHave}
 */
proto.protocol.DontHave.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setType(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setHash(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DontHave} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DontHave.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DontHave.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DontHave.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getType();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getHash_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DontHave} The clone.
 */
proto.protocol.DontHave.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.DontHave} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 type = 1;
 * @return {number}
 */
proto.protocol.DontHave.prototype.getType = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.DontHave.prototype.setType = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.DontHave.prototype.getHash = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.DontHave.prototype.getHash_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.DontHave.prototype.getHash_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.DontHave.prototype.setHash = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LedgerUpgradeNotify = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.LedgerUpgradeNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.LedgerUpgradeNotify.displayName = 'proto.protocol.LedgerUpgradeNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.LedgerUpgradeNotify.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.LedgerUpgradeNotify.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.LedgerUpgradeNotify} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.LedgerUpgradeNotify.toObject = function (includeInstance, msg) {
        var f, obj = {
            nonce: msg.getNonce(),
            upgrade: (f = msg.getUpgrade()) && common_pb.LedgerUpgrade.toObject(includeInstance, f),
            signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LedgerUpgradeNotify}
 */
proto.protocol.LedgerUpgradeNotify.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.LedgerUpgradeNotify;
    return proto.protocol.LedgerUpgradeNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LedgerUpgradeNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LedgerUpgradeNotify}
 */
proto.protocol.LedgerUpgradeNotify.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNonce(value);
                break;
            case 2:
                var value = new common_pb.LedgerUpgrade;
                reader.readMessage(value, common_pb.LedgerUpgrade.deserializeBinaryFromReader);
                msg.setUpgrade(value);
                break;
            case 3:
                var value = new common_pb.Signature;
                reader.readMessage(value, common_pb.Signature.deserializeBinaryFromReader);
                msg.setSignature(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LedgerUpgradeNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerUpgradeNotify.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LedgerUpgradeNotify.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerUpgradeNotify.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getNonce();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getUpgrade();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            common_pb.LedgerUpgrade.serializeBinaryToWriter
        );
    }
    f = this.getSignature();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            common_pb.Signature.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.LedgerUpgradeNotify} The clone.
 */
proto.protocol.LedgerUpgradeNotify.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.LedgerUpgradeNotify} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 nonce = 1;
 * @return {number}
 */
proto.protocol.LedgerUpgradeNotify.prototype.getNonce = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.LedgerUpgradeNotify.prototype.setNonce = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional LedgerUpgrade upgrade = 2;
 * @return {proto.protocol.LedgerUpgrade}
 */
proto.protocol.LedgerUpgradeNotify.prototype.getUpgrade = function () {
    return /** @type{proto.protocol.LedgerUpgrade} */ (
        jspb.Message.getWrapperField(this, common_pb.LedgerUpgrade, 2));
};


/** @param {proto.protocol.LedgerUpgrade|undefined} value  */
proto.protocol.LedgerUpgradeNotify.prototype.setUpgrade = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.LedgerUpgradeNotify.prototype.clearUpgrade = function () {
    this.setUpgrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.LedgerUpgradeNotify.prototype.hasUpgrade = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature signature = 3;
 * @return {proto.protocol.Signature}
 */
proto.protocol.LedgerUpgradeNotify.prototype.getSignature = function () {
    return /** @type{proto.protocol.Signature} */ (
        jspb.Message.getWrapperField(this, common_pb.Signature, 3));
};


/** @param {proto.protocol.Signature|undefined} value  */
proto.protocol.LedgerUpgradeNotify.prototype.setSignature = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.LedgerUpgradeNotify.prototype.clearSignature = function () {
    this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.LedgerUpgradeNotify.prototype.hasSignature = function () {
    return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.EntryList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.EntryList.repeatedFields_, null);
};
goog.inherits(proto.protocol.EntryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.EntryList.displayName = 'proto.protocol.EntryList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.EntryList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.EntryList.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.EntryList.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.EntryList} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.EntryList.toObject = function (includeInstance, msg) {
        var f, obj = {
            entryList: msg.getEntryList_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.EntryList}
 */
proto.protocol.EntryList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.EntryList;
    return proto.protocol.EntryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.EntryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.EntryList}
 */
proto.protocol.EntryList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.getEntryList().push(value);
                msg.setEntryList(msg.getEntryList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.EntryList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.EntryList.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.EntryList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.EntryList.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getEntryList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(
            1,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.EntryList} The clone.
 */
proto.protocol.EntryList.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.EntryList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes entry = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protocol.EntryList.prototype.getEntryList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes entry = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getEntryList()`
 * @return {!Array.<string>}
 */
proto.protocol.EntryList.prototype.getEntryList_asB64 = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
        this.getEntryList()));
};


/**
 * repeated bytes entry = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntryList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.protocol.EntryList.prototype.getEntryList_asU8 = function () {
    return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getEntryList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.protocol.EntryList.prototype.setEntryList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


proto.protocol.EntryList.prototype.clearEntryList = function () {
    jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainHello = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ChainHello.repeatedFields_, null);
};
goog.inherits(proto.protocol.ChainHello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainHello.displayName = 'proto.protocol.ChainHello';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ChainHello.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainHello.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainHello.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainHello} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainHello.toObject = function (includeInstance, msg) {
        var f, obj = {
            apiListList: jspb.Message.getField(msg, 1),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainHello}
 */
proto.protocol.ChainHello.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainHello;
    return proto.protocol.ChainHello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainHello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainHello}
 */
proto.protocol.ChainHello.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Array.<!proto.protocol.ChainMessageType>} */ (reader.readPackedEnum());
                msg.setApiListList(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainHello} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainHello.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainHello.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainHello.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getApiListList();
    if (f.length > 0) {
        writer.writePackedEnum(
            1,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainHello} The clone.
 */
proto.protocol.ChainHello.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainHello} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ChainMessageType api_list = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.ChainMessageType>}
 */
proto.protocol.ChainHello.prototype.getApiListList = function () {
    return /** @type {!Array.<!proto.protocol.ChainMessageType>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<!proto.protocol.ChainMessageType>} value  */
proto.protocol.ChainHello.prototype.setApiListList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


proto.protocol.ChainHello.prototype.clearApiListList = function () {
    jspb.Message.setField(this, 1, []);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.protocol.ChainHello.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.ChainHello.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ChainStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainStatus.displayName = 'proto.protocol.ChainStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainStatus.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainStatus} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            selfAddr: msg.getSelfAddr(),
            ledgerVersion: msg.getLedgerVersion(),
            monitorVersion: msg.getMonitorVersion(),
            buchainVersion: msg.getBuchainVersion(),
            timestamp: msg.getTimestamp(),
            networkId: msg.getNetworkId(),
            chainCode: msg.getChainCode(),
            addressPrefix: msg.getAddressPrefix()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainStatus}
 */
proto.protocol.ChainStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainStatus;
    return proto.protocol.ChainStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainStatus}
 */
proto.protocol.ChainStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSelfAddr(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLedgerVersion(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setMonitorVersion(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setBuchainVersion(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNetworkId(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setChainCode(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddressPrefix(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainStatus.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainStatus.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSelfAddr();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getLedgerVersion();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getMonitorVersion();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getBuchainVersion();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getNetworkId();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
    f = this.getChainCode();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
    f = this.getAddressPrefix();
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainStatus} The clone.
 */
proto.protocol.ChainStatus.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string self_addr = 1;
 * @return {string}
 */
proto.protocol.ChainStatus.prototype.getSelfAddr = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.protocol.ChainStatus.prototype.setSelfAddr = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 ledger_version = 2;
 * @return {number}
 */
proto.protocol.ChainStatus.prototype.getLedgerVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.ChainStatus.prototype.setLedgerVersion = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 monitor_version = 3;
 * @return {number}
 */
proto.protocol.ChainStatus.prototype.getMonitorVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.ChainStatus.prototype.setMonitorVersion = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string buchain_version = 4;
 * @return {string}
 */
proto.protocol.ChainStatus.prototype.getBuchainVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.protocol.ChainStatus.prototype.setBuchainVersion = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.protocol.ChainStatus.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.ChainStatus.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 network_id = 6;
 * @return {number}
 */
proto.protocol.ChainStatus.prototype.getNetworkId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.protocol.ChainStatus.prototype.setNetworkId = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional string chain_code = 7;
 * @return {string}
 */
proto.protocol.ChainStatus.prototype.getChainCode = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.protocol.ChainStatus.prototype.setChainCode = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * optional string address_prefix = 8;
 * @return {string}
 */
proto.protocol.ChainStatus.prototype.getAddressPrefix = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.protocol.ChainStatus.prototype.setAddressPrefix = function (value) {
    jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainPeerMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ChainPeerMessage.repeatedFields_, null);
};
goog.inherits(proto.protocol.ChainPeerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainPeerMessage.displayName = 'proto.protocol.ChainPeerMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ChainPeerMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainPeerMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainPeerMessage.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainPeerMessage} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainPeerMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            srcPeerAddr: msg.getSrcPeerAddr(),
            desPeerAddrsList: jspb.Message.getField(msg, 2),
            data: msg.getData_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainPeerMessage}
 */
proto.protocol.ChainPeerMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainPeerMessage;
    return proto.protocol.ChainPeerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainPeerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainPeerMessage}
 */
proto.protocol.ChainPeerMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSrcPeerAddr(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.getDesPeerAddrsList().push(value);
                msg.setDesPeerAddrsList(msg.getDesPeerAddrsList());
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainPeerMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainPeerMessage.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainPeerMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainPeerMessage.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSrcPeerAddr();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getDesPeerAddrsList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            2,
            f
        );
    }
    f = this.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainPeerMessage} The clone.
 */
proto.protocol.ChainPeerMessage.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainPeerMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string src_peer_addr = 1;
 * @return {string}
 */
proto.protocol.ChainPeerMessage.prototype.getSrcPeerAddr = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.protocol.ChainPeerMessage.prototype.setSrcPeerAddr = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * repeated string des_peer_addrs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protocol.ChainPeerMessage.prototype.getDesPeerAddrsList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.protocol.ChainPeerMessage.prototype.setDesPeerAddrsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};


proto.protocol.ChainPeerMessage.prototype.clearDesPeerAddrsList = function () {
    jspb.Message.setField(this, 2, []);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ChainPeerMessage.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.protocol.ChainPeerMessage.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.protocol.ChainPeerMessage.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.ChainPeerMessage.prototype.setData = function (value) {
    jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainSubscribeTx = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ChainSubscribeTx.repeatedFields_, null);
};
goog.inherits(proto.protocol.ChainSubscribeTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainSubscribeTx.displayName = 'proto.protocol.ChainSubscribeTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ChainSubscribeTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainSubscribeTx.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainSubscribeTx.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainSubscribeTx} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainSubscribeTx.toObject = function (includeInstance, msg) {
        var f, obj = {
            addressList: jspb.Message.getField(msg, 1)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainSubscribeTx}
 */
proto.protocol.ChainSubscribeTx.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainSubscribeTx;
    return proto.protocol.ChainSubscribeTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainSubscribeTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainSubscribeTx}
 */
proto.protocol.ChainSubscribeTx.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.getAddressList().push(value);
                msg.setAddressList(msg.getAddressList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainSubscribeTx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainSubscribeTx.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainSubscribeTx.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainSubscribeTx.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getAddressList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            1,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainSubscribeTx} The clone.
 */
proto.protocol.ChainSubscribeTx.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainSubscribeTx} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string address = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protocol.ChainSubscribeTx.prototype.getAddressList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.protocol.ChainSubscribeTx.prototype.setAddressList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


proto.protocol.ChainSubscribeTx.prototype.clearAddressList = function () {
    jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainResponse.displayName = 'proto.protocol.ChainResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainResponse} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            errorCode: msg.getErrorCode(),
            errorDesc: msg.getErrorDesc()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainResponse}
 */
proto.protocol.ChainResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainResponse;
    return proto.protocol.ChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainResponse}
 */
proto.protocol.ChainResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setErrorCode(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setErrorDesc(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainResponse.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainResponse.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getErrorCode();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = this.getErrorDesc();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainResponse} The clone.
 */
proto.protocol.ChainResponse.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 error_code = 1;
 * @return {number}
 */
proto.protocol.ChainResponse.prototype.getErrorCode = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.ChainResponse.prototype.setErrorCode = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string error_desc = 2;
 * @return {string}
 */
proto.protocol.ChainResponse.prototype.getErrorDesc = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.protocol.ChainResponse.prototype.setErrorDesc = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainTxStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ChainTxStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainTxStatus.displayName = 'proto.protocol.ChainTxStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainTxStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainTxStatus.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainTxStatus} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainTxStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: msg.getStatus(),
            txHash: msg.getTxHash(),
            sourceAddress: msg.getSourceAddress(),
            sourceAccountSeq: msg.getSourceAccountSeq(),
            ledgerSeq: msg.getLedgerSeq(),
            newAccountSeq: msg.getNewAccountSeq(),
            errorCode: msg.getErrorCode(),
            errorDesc: msg.getErrorDesc(),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainTxStatus}
 */
proto.protocol.ChainTxStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainTxStatus;
    return proto.protocol.ChainTxStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainTxStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainTxStatus}
 */
proto.protocol.ChainTxStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.protocol.ChainTxStatus.TxStatus} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTxHash(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setSourceAddress(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSourceAccountSeq(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLedgerSeq(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setNewAccountSeq(value);
                break;
            case 7:
                var value = /** @type {!proto.protocol.ERRORCODE} */ (reader.readEnum());
                msg.setErrorCode(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setErrorDesc(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainTxStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainTxStatus.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainTxStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainTxStatus.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
    f = this.getTxHash();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getSourceAddress();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = this.getSourceAccountSeq();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
    f = this.getLedgerSeq();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getNewAccountSeq();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
    f = this.getErrorCode();
    if (f !== 0.0) {
        writer.writeEnum(
            7,
            f
        );
    }
    f = this.getErrorDesc();
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            9,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainTxStatus} The clone.
 */
proto.protocol.ChainTxStatus.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainTxStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TxStatus status = 1;
 * @return {!proto.protocol.ChainTxStatus.TxStatus}
 */
proto.protocol.ChainTxStatus.prototype.getStatus = function () {
    return /** @type {!proto.protocol.ChainTxStatus.TxStatus} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.protocol.ChainTxStatus.TxStatus} value  */
proto.protocol.ChainTxStatus.prototype.setStatus = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.protocol.ChainTxStatus.prototype.getTxHash = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.protocol.ChainTxStatus.prototype.setTxHash = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string source_address = 3;
 * @return {string}
 */
proto.protocol.ChainTxStatus.prototype.getSourceAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.protocol.ChainTxStatus.prototype.setSourceAddress = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 source_account_seq = 4;
 * @return {number}
 */
proto.protocol.ChainTxStatus.prototype.getSourceAccountSeq = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.protocol.ChainTxStatus.prototype.setSourceAccountSeq = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 ledger_seq = 5;
 * @return {number}
 */
proto.protocol.ChainTxStatus.prototype.getLedgerSeq = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.ChainTxStatus.prototype.setLedgerSeq = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 new_account_seq = 6;
 * @return {number}
 */
proto.protocol.ChainTxStatus.prototype.getNewAccountSeq = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.protocol.ChainTxStatus.prototype.setNewAccountSeq = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional ERRORCODE error_code = 7;
 * @return {!proto.protocol.ERRORCODE}
 */
proto.protocol.ChainTxStatus.prototype.getErrorCode = function () {
    return /** @type {!proto.protocol.ERRORCODE} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.protocol.ERRORCODE} value  */
proto.protocol.ChainTxStatus.prototype.setErrorCode = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * optional string error_desc = 8;
 * @return {string}
 */
proto.protocol.ChainTxStatus.prototype.getErrorDesc = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.protocol.ChainTxStatus.prototype.setErrorDesc = function (value) {
    jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 timestamp = 9;
 * @return {number}
 */
proto.protocol.ChainTxStatus.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.protocol.ChainTxStatus.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.protocol.ChainTxStatus.TxStatus = {
    UNDEFINED: 0,
    CONFIRMED: 1,
    PENDING: 2,
    COMPLETE: 3,
    FAILURE: 4,
    APPLY_FAILURE: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnvResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.TransactionEnvResult.repeatedFields_, null);
};
goog.inherits(proto.protocol.TransactionEnvResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.TransactionEnvResult.displayName = 'proto.protocol.TransactionEnvResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnvResult.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.TransactionEnvResult.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.TransactionEnvResult.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.TransactionEnvResult} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.TransactionEnvResult.toObject = function (includeInstance, msg) {
        var f, obj = {
            tranEnv: (f = msg.getTranEnv()) && chain_pb.TransactionEnv.toObject(includeInstance, f),
            txHash: msg.getTxHash(),
            errorCode: msg.getErrorCode(),
            errorDesc: msg.getErrorDesc(),
            ledgerSeq: msg.getLedgerSeq(),
            closeTime: msg.getCloseTime(),
            actualFee: msg.getActualFee(),
            contractTxHashesList: msg.getContractTxHashesList_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnvResult}
 */
proto.protocol.TransactionEnvResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.TransactionEnvResult;
    return proto.protocol.TransactionEnvResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnvResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnvResult}
 */
proto.protocol.TransactionEnvResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new chain_pb.TransactionEnv;
                reader.readMessage(value, chain_pb.TransactionEnv.deserializeBinaryFromReader);
                msg.setTranEnv(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTxHash(value);
                break;
            case 3:
                var value = /** @type {!proto.protocol.ERRORCODE} */ (reader.readEnum());
                msg.setErrorCode(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setErrorDesc(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLedgerSeq(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCloseTime(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setActualFee(value);
                break;
            case 8:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.getContractTxHashesList().push(value);
                msg.setContractTxHashesList(msg.getContractTxHashesList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnvResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvResult.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvResult.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getTranEnv();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            chain_pb.TransactionEnv.serializeBinaryToWriter
        );
    }
    f = this.getTxHash();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getErrorCode();
    if (f !== 0.0) {
        writer.writeEnum(
            3,
            f
        );
    }
    f = this.getErrorDesc();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = this.getLedgerSeq();
    if (f !== 0) {
        writer.writeInt64(
            5,
            f
        );
    }
    f = this.getCloseTime();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
    f = this.getActualFee();
    if (f !== 0) {
        writer.writeInt64(
            7,
            f
        );
    }
    f = this.getContractTxHashesList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(
            8,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.TransactionEnvResult} The clone.
 */
proto.protocol.TransactionEnvResult.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.TransactionEnvResult} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional TransactionEnv tran_env = 1;
 * @return {proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnvResult.prototype.getTranEnv = function () {
    return /** @type{proto.protocol.TransactionEnv} */ (
        jspb.Message.getWrapperField(this, chain_pb.TransactionEnv, 1));
};


/** @param {proto.protocol.TransactionEnv|undefined} value  */
proto.protocol.TransactionEnvResult.prototype.setTranEnv = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.TransactionEnvResult.prototype.clearTranEnv = function () {
    this.setTranEnv(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.TransactionEnvResult.prototype.hasTranEnv = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.protocol.TransactionEnvResult.prototype.getTxHash = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.protocol.TransactionEnvResult.prototype.setTxHash = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional ERRORCODE error_code = 3;
 * @return {!proto.protocol.ERRORCODE}
 */
proto.protocol.TransactionEnvResult.prototype.getErrorCode = function () {
    return /** @type {!proto.protocol.ERRORCODE} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.protocol.ERRORCODE} value  */
proto.protocol.TransactionEnvResult.prototype.setErrorCode = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string error_desc = 4;
 * @return {string}
 */
proto.protocol.TransactionEnvResult.prototype.getErrorDesc = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.protocol.TransactionEnvResult.prototype.setErrorDesc = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 ledger_seq = 5;
 * @return {number}
 */
proto.protocol.TransactionEnvResult.prototype.getLedgerSeq = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.protocol.TransactionEnvResult.prototype.setLedgerSeq = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 close_time = 6;
 * @return {number}
 */
proto.protocol.TransactionEnvResult.prototype.getCloseTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.protocol.TransactionEnvResult.prototype.setCloseTime = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 actual_fee = 7;
 * @return {number}
 */
proto.protocol.TransactionEnvResult.prototype.getActualFee = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.protocol.TransactionEnvResult.prototype.setActualFee = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protocol.TransactionEnvResult.prototype.getContractTxHashesList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 8));
};


/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getContractTxHashesList()`
 * @return {!Array.<string>}
 */
proto.protocol.TransactionEnvResult.prototype.getContractTxHashesList_asB64 = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
        this.getContractTxHashesList()));
};


/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractTxHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.protocol.TransactionEnvResult.prototype.getContractTxHashesList_asU8 = function () {
    return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getContractTxHashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.protocol.TransactionEnvResult.prototype.setContractTxHashesList = function (value) {
    jspb.Message.setField(this, 8, value || []);
};


proto.protocol.TransactionEnvResult.prototype.clearContractTxHashesList = function () {
    jspb.Message.setField(this, 8, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LedgerTxs = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.LedgerTxs.repeatedFields_, null);
};
goog.inherits(proto.protocol.LedgerTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.LedgerTxs.displayName = 'proto.protocol.LedgerTxs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.LedgerTxs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.LedgerTxs.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.LedgerTxs.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.LedgerTxs} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.LedgerTxs.toObject = function (includeInstance, msg) {
        var f, obj = {
            header: (f = msg.getHeader()) && chain_pb.LedgerHeader.toObject(includeInstance, f),
            txsList: jspb.Message.toObjectList(msg.getTxsList(),
                proto.protocol.TransactionEnvResult.toObject, includeInstance),
            ledgerLength: msg.getLedgerLength()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LedgerTxs}
 */
proto.protocol.LedgerTxs.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.LedgerTxs;
    return proto.protocol.LedgerTxs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LedgerTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LedgerTxs}
 */
proto.protocol.LedgerTxs.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new chain_pb.LedgerHeader;
                reader.readMessage(value, chain_pb.LedgerHeader.deserializeBinaryFromReader);
                msg.setHeader(value);
                break;
            case 2:
                var value = new proto.protocol.TransactionEnvResult;
                reader.readMessage(value, proto.protocol.TransactionEnvResult.deserializeBinaryFromReader);
                msg.getTxsList().push(value);
                msg.setTxsList(msg.getTxsList());
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLedgerLength(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LedgerTxs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerTxs.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LedgerTxs.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerTxs.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getHeader();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            chain_pb.LedgerHeader.serializeBinaryToWriter
        );
    }
    f = this.getTxsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.protocol.TransactionEnvResult.serializeBinaryToWriter
        );
    }
    f = this.getLedgerLength();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.LedgerTxs} The clone.
 */
proto.protocol.LedgerTxs.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.LedgerTxs} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional LedgerHeader header = 1;
 * @return {proto.protocol.LedgerHeader}
 */
proto.protocol.LedgerTxs.prototype.getHeader = function () {
    return /** @type{proto.protocol.LedgerHeader} */ (
        jspb.Message.getWrapperField(this, chain_pb.LedgerHeader, 1));
};


/** @param {proto.protocol.LedgerHeader|undefined} value  */
proto.protocol.LedgerTxs.prototype.setHeader = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.LedgerTxs.prototype.clearHeader = function () {
    this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.LedgerTxs.prototype.hasHeader = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TransactionEnvResult txs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.TransactionEnvResult>}
 */
proto.protocol.LedgerTxs.prototype.getTxsList = function () {
    return /** @type{!Array.<!proto.protocol.TransactionEnvResult>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.TransactionEnvResult, 2));
};


/** @param {Array.<!proto.protocol.TransactionEnvResult>} value  */
proto.protocol.LedgerTxs.prototype.setTxsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.protocol.LedgerTxs.prototype.clearTxsList = function () {
    this.setTxsList([]);
};


/**
 * optional int64 ledger_length = 3;
 * @return {number}
 */
proto.protocol.LedgerTxs.prototype.getLedgerLength = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.LedgerTxs.prototype.setLedgerLength = function (value) {
    jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChainContractLog = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ChainContractLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ChainContractLog.displayName = 'proto.protocol.ChainContractLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ChainContractLog.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ChainContractLog.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ChainContractLog} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ChainContractLog.toObject = function (includeInstance, msg) {
        var f, obj = {
            sender: msg.getSender(),
            data: msg.getData(),
            timestamp: msg.getTimestamp()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChainContractLog}
 */
proto.protocol.ChainContractLog.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ChainContractLog;
    return proto.protocol.ChainContractLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChainContractLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChainContractLog}
 */
proto.protocol.ChainContractLog.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSender(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setData(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChainContractLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainContractLog.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChainContractLog.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ChainContractLog.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSender();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getData();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ChainContractLog} The clone.
 */
proto.protocol.ChainContractLog.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ChainContractLog} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.protocol.ChainContractLog.prototype.getSender = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.protocol.ChainContractLog.prototype.setSender = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.protocol.ChainContractLog.prototype.getData = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.protocol.ChainContractLog.prototype.setData = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.protocol.ChainContractLog.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.ChainContractLog.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.protocol.OVERLAY_MESSAGE_TYPE = {
    OVERLAY_MSGTYPE_NONE: 0,
    OVERLAY_MSGTYPE_PING: 1,
    OVERLAY_MSGTYPE_HELLO: 2,
    OVERLAY_MSGTYPE_PEERS: 3,
    OVERLAY_MSGTYPE_TRANSACTION: 4,
    OVERLAY_MSGTYPE_LEDGERS: 5,
    OVERLAY_MSGTYPE_PBFT: 6,
    OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY: 7
};

/**
 * @enum {number}
 */
proto.protocol.ChainMessageType = {
    CHAIN_TYPE_NONE: 0,
    CHAIN_HELLO: 10,
    CHAIN_TX_STATUS: 11,
    CHAIN_PEER_ONLINE: 12,
    CHAIN_PEER_OFFLINE: 13,
    CHAIN_PEER_MESSAGE: 14,
    CHAIN_SUBMITTRANSACTION: 15,
    CHAIN_LEDGER_HEADER: 16,
    CHAIN_CONTRACT_LOG: 17,
    CHAIN_LEDGER_TXS: 18,
    CHAIN_SUBSCRIBE_TX: 19,
    CHAIN_TX_ENV_STORE: 20
};

goog.object.extend(exports, proto.protocol);
