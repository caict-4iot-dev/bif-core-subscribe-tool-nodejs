/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.protocol.FeeConfig', null, global);
goog.exportSymbol('proto.protocol.FeeConfig.Type', null, global);
goog.exportSymbol('proto.protocol.Pbft', null, global);
goog.exportSymbol('proto.protocol.PbftCommit', null, global);
goog.exportSymbol('proto.protocol.PbftEnv', null, global);
goog.exportSymbol('proto.protocol.PbftMessageType', null, global);
goog.exportSymbol('proto.protocol.PbftNewView', null, global);
goog.exportSymbol('proto.protocol.PbftPrePrepare', null, global);
goog.exportSymbol('proto.protocol.PbftPrepare', null, global);
goog.exportSymbol('proto.protocol.PbftPreparedSet', null, global);
goog.exportSymbol('proto.protocol.PbftProof', null, global);
goog.exportSymbol('proto.protocol.PbftValueType', null, global);
goog.exportSymbol('proto.protocol.PbftViewChange', null, global);
goog.exportSymbol('proto.protocol.PbftViewChangeWithRawValue', null, global);
goog.exportSymbol('proto.protocol.Validator', null, global);
goog.exportSymbol('proto.protocol.ValidatorSet', null, global);
goog.exportSymbol('proto.protocol.ValidatorSetV3', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftPrePrepare = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftPrePrepare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftPrePrepare.displayName = 'proto.protocol.PbftPrePrepare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftPrePrepare.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftPrePrepare.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftPrePrepare} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftPrePrepare.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewNumber: msg.getViewNumber(),
            sequence: msg.getSequence(),
            replicaId: msg.getReplicaId(),
            value: msg.getValue_asB64(),
            valueDigest: msg.getValueDigest_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftPrePrepare}
 */
proto.protocol.PbftPrePrepare.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftPrePrepare;
    return proto.protocol.PbftPrePrepare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftPrePrepare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftPrePrepare}
 */
proto.protocol.PbftPrePrepare.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setViewNumber(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequence(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReplicaId(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValue(value);
                break;
            case 5:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValueDigest(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftPrePrepare} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPrePrepare.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftPrePrepare.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPrePrepare.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSequence();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getReplicaId();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getValue_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
    f = this.getValueDigest_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            5,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftPrePrepare} The clone.
 */
proto.protocol.PbftPrePrepare.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftPrePrepare} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 view_number = 1;
 * @return {number}
 */
proto.protocol.PbftPrePrepare.prototype.getViewNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrePrepare.prototype.setViewNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 sequence = 2;
 * @return {number}
 */
proto.protocol.PbftPrePrepare.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrePrepare.prototype.setSequence = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 replica_id = 3;
 * @return {number}
 */
proto.protocol.PbftPrePrepare.prototype.getReplicaId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrePrepare.prototype.setReplicaId = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.PbftPrePrepare.prototype.getValue = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.protocol.PbftPrePrepare.prototype.getValue_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.protocol.PbftPrePrepare.prototype.getValue_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.PbftPrePrepare.prototype.setValue = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes value_digest = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.PbftPrePrepare.prototype.getValueDigest = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes value_digest = 5;
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {string}
 */
proto.protocol.PbftPrePrepare.prototype.getValueDigest_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getValueDigest()));
};


/**
 * optional bytes value_digest = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {!Uint8Array}
 */
proto.protocol.PbftPrePrepare.prototype.getValueDigest_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getValueDigest()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.PbftPrePrepare.prototype.setValueDigest = function (value) {
    jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftPrepare = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftPrepare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftPrepare.displayName = 'proto.protocol.PbftPrepare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftPrepare.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftPrepare.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftPrepare} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftPrepare.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewNumber: msg.getViewNumber(),
            sequence: msg.getSequence(),
            replicaId: msg.getReplicaId(),
            valueDigest: msg.getValueDigest_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftPrepare}
 */
proto.protocol.PbftPrepare.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftPrepare;
    return proto.protocol.PbftPrepare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftPrepare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftPrepare}
 */
proto.protocol.PbftPrepare.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setViewNumber(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequence(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReplicaId(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValueDigest(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftPrepare} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPrepare.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftPrepare.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPrepare.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSequence();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getReplicaId();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getValueDigest_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftPrepare} The clone.
 */
proto.protocol.PbftPrepare.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftPrepare} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 view_number = 1;
 * @return {number}
 */
proto.protocol.PbftPrepare.prototype.getViewNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrepare.prototype.setViewNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 sequence = 2;
 * @return {number}
 */
proto.protocol.PbftPrepare.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrepare.prototype.setSequence = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 replica_id = 3;
 * @return {number}
 */
proto.protocol.PbftPrepare.prototype.getReplicaId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.PbftPrepare.prototype.setReplicaId = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes value_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.PbftPrepare.prototype.getValueDigest = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes value_digest = 4;
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {string}
 */
proto.protocol.PbftPrepare.prototype.getValueDigest_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getValueDigest()));
};


/**
 * optional bytes value_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {!Uint8Array}
 */
proto.protocol.PbftPrepare.prototype.getValueDigest_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getValueDigest()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.PbftPrepare.prototype.setValueDigest = function (value) {
    jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftCommit = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftCommit.displayName = 'proto.protocol.PbftCommit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftCommit.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftCommit.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftCommit} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftCommit.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewNumber: msg.getViewNumber(),
            sequence: msg.getSequence(),
            replicaId: msg.getReplicaId(),
            valueDigest: msg.getValueDigest_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftCommit}
 */
proto.protocol.PbftCommit.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftCommit;
    return proto.protocol.PbftCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftCommit}
 */
proto.protocol.PbftCommit.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setViewNumber(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequence(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReplicaId(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValueDigest(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftCommit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftCommit.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftCommit.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftCommit.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSequence();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getReplicaId();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getValueDigest_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftCommit} The clone.
 */
proto.protocol.PbftCommit.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftCommit} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 view_number = 1;
 * @return {number}
 */
proto.protocol.PbftCommit.prototype.getViewNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.PbftCommit.prototype.setViewNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 sequence = 2;
 * @return {number}
 */
proto.protocol.PbftCommit.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.PbftCommit.prototype.setSequence = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 replica_id = 3;
 * @return {number}
 */
proto.protocol.PbftCommit.prototype.getReplicaId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.PbftCommit.prototype.setReplicaId = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes value_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.PbftCommit.prototype.getValueDigest = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes value_digest = 4;
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {string}
 */
proto.protocol.PbftCommit.prototype.getValueDigest_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getValueDigest()));
};


/**
 * optional bytes value_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueDigest()`
 * @return {!Uint8Array}
 */
proto.protocol.PbftCommit.prototype.getValueDigest_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getValueDigest()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.PbftCommit.prototype.setValueDigest = function (value) {
    jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftPreparedSet = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PbftPreparedSet.repeatedFields_, null);
};
goog.inherits(proto.protocol.PbftPreparedSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftPreparedSet.displayName = 'proto.protocol.PbftPreparedSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PbftPreparedSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftPreparedSet.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftPreparedSet.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftPreparedSet} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftPreparedSet.toObject = function (includeInstance, msg) {
        var f, obj = {
            prePrepare: (f = msg.getPrePrepare()) && proto.protocol.PbftEnv.toObject(includeInstance, f),
            prepareList: jspb.Message.toObjectList(msg.getPrepareList(),
                proto.protocol.PbftEnv.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftPreparedSet}
 */
proto.protocol.PbftPreparedSet.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftPreparedSet;
    return proto.protocol.PbftPreparedSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftPreparedSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftPreparedSet}
 */
proto.protocol.PbftPreparedSet.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.setPrePrepare(value);
                break;
            case 2:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.getPrepareList().push(value);
                msg.setPrepareList(msg.getPrepareList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftPreparedSet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPreparedSet.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftPreparedSet.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftPreparedSet.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getPrePrepare();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
    f = this.getPrepareList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftPreparedSet} The clone.
 */
proto.protocol.PbftPreparedSet.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftPreparedSet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PbftEnv pre_prepare = 1;
 * @return {proto.protocol.PbftEnv}
 */
proto.protocol.PbftPreparedSet.prototype.getPrePrepare = function () {
    return /** @type{proto.protocol.PbftEnv} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftEnv, 1));
};


/** @param {proto.protocol.PbftEnv|undefined} value  */
proto.protocol.PbftPreparedSet.prototype.setPrePrepare = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.PbftPreparedSet.prototype.clearPrePrepare = function () {
    this.setPrePrepare(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftPreparedSet.prototype.hasPrePrepare = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PbftEnv prepare = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.PbftEnv>}
 */
proto.protocol.PbftPreparedSet.prototype.getPrepareList = function () {
    return /** @type{!Array.<!proto.protocol.PbftEnv>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.PbftEnv, 2));
};


/** @param {Array.<!proto.protocol.PbftEnv>} value  */
proto.protocol.PbftPreparedSet.prototype.setPrepareList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.protocol.PbftPreparedSet.prototype.clearPrepareList = function () {
    this.setPrepareList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftViewChange = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftViewChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftViewChange.displayName = 'proto.protocol.PbftViewChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftViewChange.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftViewChange.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftViewChange} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftViewChange.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewNumber: msg.getViewNumber(),
            sequence: msg.getSequence(),
            prepredValueDigest: msg.getPrepredValueDigest_asB64(),
            replicaId: msg.getReplicaId()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftViewChange}
 */
proto.protocol.PbftViewChange.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftViewChange;
    return proto.protocol.PbftViewChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftViewChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftViewChange}
 */
proto.protocol.PbftViewChange.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setViewNumber(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequence(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPrepredValueDigest(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReplicaId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftViewChange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftViewChange.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftViewChange.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftViewChange.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSequence();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getPrepredValueDigest_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = this.getReplicaId();
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftViewChange} The clone.
 */
proto.protocol.PbftViewChange.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftViewChange} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 view_number = 1;
 * @return {number}
 */
proto.protocol.PbftViewChange.prototype.getViewNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.PbftViewChange.prototype.setViewNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 sequence = 2;
 * @return {number}
 */
proto.protocol.PbftViewChange.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.PbftViewChange.prototype.setSequence = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes prepred_value_digest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.PbftViewChange.prototype.getPrepredValueDigest = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes prepred_value_digest = 3;
 * This is a type-conversion wrapper around `getPrepredValueDigest()`
 * @return {string}
 */
proto.protocol.PbftViewChange.prototype.getPrepredValueDigest_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getPrepredValueDigest()));
};


/**
 * optional bytes prepred_value_digest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrepredValueDigest()`
 * @return {!Uint8Array}
 */
proto.protocol.PbftViewChange.prototype.getPrepredValueDigest_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getPrepredValueDigest()));
};


/** @param {!(string|Uint8Array)} value  */
proto.protocol.PbftViewChange.prototype.setPrepredValueDigest = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 replica_id = 4;
 * @return {number}
 */
proto.protocol.PbftViewChange.prototype.getReplicaId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.protocol.PbftViewChange.prototype.setReplicaId = function (value) {
    jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftViewChangeWithRawValue = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftViewChangeWithRawValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftViewChangeWithRawValue.displayName = 'proto.protocol.PbftViewChangeWithRawValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftViewChangeWithRawValue.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftViewChangeWithRawValue.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftViewChangeWithRawValue} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftViewChangeWithRawValue.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewChangeEnv: (f = msg.getViewChangeEnv()) && proto.protocol.PbftEnv.toObject(includeInstance, f),
            preparedSet: (f = msg.getPreparedSet()) && proto.protocol.PbftPreparedSet.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftViewChangeWithRawValue}
 */
proto.protocol.PbftViewChangeWithRawValue.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftViewChangeWithRawValue;
    return proto.protocol.PbftViewChangeWithRawValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftViewChangeWithRawValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftViewChangeWithRawValue}
 */
proto.protocol.PbftViewChangeWithRawValue.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.setViewChangeEnv(value);
                break;
            case 2:
                var value = new proto.protocol.PbftPreparedSet;
                reader.readMessage(value, proto.protocol.PbftPreparedSet.deserializeBinaryFromReader);
                msg.setPreparedSet(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftViewChangeWithRawValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftViewChangeWithRawValue.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewChangeEnv();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
    f = this.getPreparedSet();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.protocol.PbftPreparedSet.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftViewChangeWithRawValue} The clone.
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftViewChangeWithRawValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PbftEnv view_change_env = 1;
 * @return {proto.protocol.PbftEnv}
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.getViewChangeEnv = function () {
    return /** @type{proto.protocol.PbftEnv} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftEnv, 1));
};


/** @param {proto.protocol.PbftEnv|undefined} value  */
proto.protocol.PbftViewChangeWithRawValue.prototype.setViewChangeEnv = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.PbftViewChangeWithRawValue.prototype.clearViewChangeEnv = function () {
    this.setViewChangeEnv(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.hasViewChangeEnv = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbftPreparedSet prepared_set = 2;
 * @return {proto.protocol.PbftPreparedSet}
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.getPreparedSet = function () {
    return /** @type{proto.protocol.PbftPreparedSet} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftPreparedSet, 2));
};


/** @param {proto.protocol.PbftPreparedSet|undefined} value  */
proto.protocol.PbftViewChangeWithRawValue.prototype.setPreparedSet = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.PbftViewChangeWithRawValue.prototype.clearPreparedSet = function () {
    this.setPreparedSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftViewChangeWithRawValue.prototype.hasPreparedSet = function () {
    return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftNewView = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PbftNewView.repeatedFields_, null);
};
goog.inherits(proto.protocol.PbftNewView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftNewView.displayName = 'proto.protocol.PbftNewView';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PbftNewView.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftNewView.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftNewView.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftNewView} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftNewView.toObject = function (includeInstance, msg) {
        var f, obj = {
            viewNumber: msg.getViewNumber(),
            sequence: msg.getSequence(),
            replicaId: msg.getReplicaId(),
            viewChangesList: jspb.Message.toObjectList(msg.getViewChangesList(),
                proto.protocol.PbftEnv.toObject, includeInstance),
            prePrepare: (f = msg.getPrePrepare()) && proto.protocol.PbftEnv.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftNewView}
 */
proto.protocol.PbftNewView.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftNewView;
    return proto.protocol.PbftNewView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftNewView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftNewView}
 */
proto.protocol.PbftNewView.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setViewNumber(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequence(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReplicaId(value);
                break;
            case 4:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.getViewChangesList().push(value);
                msg.setViewChangesList(msg.getViewChangesList());
                break;
            case 5:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.setPrePrepare(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftNewView} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftNewView.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftNewView.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftNewView.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getViewNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getSequence();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = this.getReplicaId();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = this.getViewChangesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            4,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
    f = this.getPrePrepare();
    if (f != null) {
        writer.writeMessage(
            5,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftNewView} The clone.
 */
proto.protocol.PbftNewView.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftNewView} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 view_number = 1;
 * @return {number}
 */
proto.protocol.PbftNewView.prototype.getViewNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.PbftNewView.prototype.setViewNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 sequence = 2;
 * @return {number}
 */
proto.protocol.PbftNewView.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.PbftNewView.prototype.setSequence = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 replica_id = 3;
 * @return {number}
 */
proto.protocol.PbftNewView.prototype.getReplicaId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.protocol.PbftNewView.prototype.setReplicaId = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * repeated PbftEnv view_changes = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.PbftEnv>}
 */
proto.protocol.PbftNewView.prototype.getViewChangesList = function () {
    return /** @type{!Array.<!proto.protocol.PbftEnv>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.PbftEnv, 4));
};


/** @param {Array.<!proto.protocol.PbftEnv>} value  */
proto.protocol.PbftNewView.prototype.setViewChangesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.protocol.PbftNewView.prototype.clearViewChangesList = function () {
    this.setViewChangesList([]);
};


/**
 * optional PbftEnv pre_prepare = 5;
 * @return {proto.protocol.PbftEnv}
 */
proto.protocol.PbftNewView.prototype.getPrePrepare = function () {
    return /** @type{proto.protocol.PbftEnv} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftEnv, 5));
};


/** @param {proto.protocol.PbftEnv|undefined} value  */
proto.protocol.PbftNewView.prototype.setPrePrepare = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};


proto.protocol.PbftNewView.prototype.clearPrePrepare = function () {
    this.setPrePrepare(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftNewView.prototype.hasPrePrepare = function () {
    return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Pbft = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Pbft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Pbft.displayName = 'proto.protocol.Pbft';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Pbft.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Pbft.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Pbft} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Pbft.toObject = function (includeInstance, msg) {
        var f, obj = {
            roundNumber: msg.getRoundNumber(),
            type: msg.getType(),
            prePrepare: (f = msg.getPrePrepare()) && proto.protocol.PbftPrePrepare.toObject(includeInstance, f),
            prepare: (f = msg.getPrepare()) && proto.protocol.PbftPrepare.toObject(includeInstance, f),
            commit: (f = msg.getCommit()) && proto.protocol.PbftCommit.toObject(includeInstance, f),
            viewChange: (f = msg.getViewChange()) && proto.protocol.PbftViewChange.toObject(includeInstance, f),
            newView: (f = msg.getNewView()) && proto.protocol.PbftNewView.toObject(includeInstance, f),
            viewChangeWithRawvalue: (f = msg.getViewChangeWithRawvalue()) && proto.protocol.PbftViewChangeWithRawValue.toObject(includeInstance, f),
            chainId: msg.getChainId()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Pbft}
 */
proto.protocol.Pbft.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Pbft;
    return proto.protocol.Pbft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Pbft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Pbft}
 */
proto.protocol.Pbft.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setRoundNumber(value);
                break;
            case 2:
                var value = /** @type {!proto.protocol.PbftMessageType} */ (reader.readEnum());
                msg.setType(value);
                break;
            case 3:
                var value = new proto.protocol.PbftPrePrepare;
                reader.readMessage(value, proto.protocol.PbftPrePrepare.deserializeBinaryFromReader);
                msg.setPrePrepare(value);
                break;
            case 4:
                var value = new proto.protocol.PbftPrepare;
                reader.readMessage(value, proto.protocol.PbftPrepare.deserializeBinaryFromReader);
                msg.setPrepare(value);
                break;
            case 5:
                var value = new proto.protocol.PbftCommit;
                reader.readMessage(value, proto.protocol.PbftCommit.deserializeBinaryFromReader);
                msg.setCommit(value);
                break;
            case 6:
                var value = new proto.protocol.PbftViewChange;
                reader.readMessage(value, proto.protocol.PbftViewChange.deserializeBinaryFromReader);
                msg.setViewChange(value);
                break;
            case 7:
                var value = new proto.protocol.PbftNewView;
                reader.readMessage(value, proto.protocol.PbftNewView.deserializeBinaryFromReader);
                msg.setNewView(value);
                break;
            case 8:
                var value = new proto.protocol.PbftViewChangeWithRawValue;
                reader.readMessage(value, proto.protocol.PbftViewChangeWithRawValue.deserializeBinaryFromReader);
                msg.setViewChangeWithRawvalue(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setChainId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Pbft} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Pbft.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Pbft.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Pbft.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getRoundNumber();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getType();
    if (f !== 0.0) {
        writer.writeEnum(
            2,
            f
        );
    }
    f = this.getPrePrepare();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.protocol.PbftPrePrepare.serializeBinaryToWriter
        );
    }
    f = this.getPrepare();
    if (f != null) {
        writer.writeMessage(
            4,
            f,
            proto.protocol.PbftPrepare.serializeBinaryToWriter
        );
    }
    f = this.getCommit();
    if (f != null) {
        writer.writeMessage(
            5,
            f,
            proto.protocol.PbftCommit.serializeBinaryToWriter
        );
    }
    f = this.getViewChange();
    if (f != null) {
        writer.writeMessage(
            6,
            f,
            proto.protocol.PbftViewChange.serializeBinaryToWriter
        );
    }
    f = this.getNewView();
    if (f != null) {
        writer.writeMessage(
            7,
            f,
            proto.protocol.PbftNewView.serializeBinaryToWriter
        );
    }
    f = this.getViewChangeWithRawvalue();
    if (f != null) {
        writer.writeMessage(
            8,
            f,
            proto.protocol.PbftViewChangeWithRawValue.serializeBinaryToWriter
        );
    }
    f = this.getChainId();
    if (f !== 0) {
        writer.writeInt64(
            9,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Pbft} The clone.
 */
proto.protocol.Pbft.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Pbft} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 round_number = 1;
 * @return {number}
 */
proto.protocol.Pbft.prototype.getRoundNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.Pbft.prototype.setRoundNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional PbftMessageType type = 2;
 * @return {!proto.protocol.PbftMessageType}
 */
proto.protocol.Pbft.prototype.getType = function () {
    return /** @type {!proto.protocol.PbftMessageType} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.protocol.PbftMessageType} value  */
proto.protocol.Pbft.prototype.setType = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional PbftPrePrepare pre_prepare = 3;
 * @return {proto.protocol.PbftPrePrepare}
 */
proto.protocol.Pbft.prototype.getPrePrepare = function () {
    return /** @type{proto.protocol.PbftPrePrepare} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftPrePrepare, 3));
};


/** @param {proto.protocol.PbftPrePrepare|undefined} value  */
proto.protocol.Pbft.prototype.setPrePrepare = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.Pbft.prototype.clearPrePrepare = function () {
    this.setPrePrepare(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasPrePrepare = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PbftPrepare prepare = 4;
 * @return {proto.protocol.PbftPrepare}
 */
proto.protocol.Pbft.prototype.getPrepare = function () {
    return /** @type{proto.protocol.PbftPrepare} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftPrepare, 4));
};


/** @param {proto.protocol.PbftPrepare|undefined} value  */
proto.protocol.Pbft.prototype.setPrepare = function (value) {
    jspb.Message.setWrapperField(this, 4, value);
};


proto.protocol.Pbft.prototype.clearPrepare = function () {
    this.setPrepare(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasPrepare = function () {
    return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PbftCommit commit = 5;
 * @return {proto.protocol.PbftCommit}
 */
proto.protocol.Pbft.prototype.getCommit = function () {
    return /** @type{proto.protocol.PbftCommit} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftCommit, 5));
};


/** @param {proto.protocol.PbftCommit|undefined} value  */
proto.protocol.Pbft.prototype.setCommit = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};


proto.protocol.Pbft.prototype.clearCommit = function () {
    this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasCommit = function () {
    return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PbftViewChange view_change = 6;
 * @return {proto.protocol.PbftViewChange}
 */
proto.protocol.Pbft.prototype.getViewChange = function () {
    return /** @type{proto.protocol.PbftViewChange} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftViewChange, 6));
};


/** @param {proto.protocol.PbftViewChange|undefined} value  */
proto.protocol.Pbft.prototype.setViewChange = function (value) {
    jspb.Message.setWrapperField(this, 6, value);
};


proto.protocol.Pbft.prototype.clearViewChange = function () {
    this.setViewChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasViewChange = function () {
    return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PbftNewView new_view = 7;
 * @return {proto.protocol.PbftNewView}
 */
proto.protocol.Pbft.prototype.getNewView = function () {
    return /** @type{proto.protocol.PbftNewView} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftNewView, 7));
};


/** @param {proto.protocol.PbftNewView|undefined} value  */
proto.protocol.Pbft.prototype.setNewView = function (value) {
    jspb.Message.setWrapperField(this, 7, value);
};


proto.protocol.Pbft.prototype.clearNewView = function () {
    this.setNewView(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasNewView = function () {
    return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PbftViewChangeWithRawValue view_change_with_rawvalue = 8;
 * @return {proto.protocol.PbftViewChangeWithRawValue}
 */
proto.protocol.Pbft.prototype.getViewChangeWithRawvalue = function () {
    return /** @type{proto.protocol.PbftViewChangeWithRawValue} */ (
        jspb.Message.getWrapperField(this, proto.protocol.PbftViewChangeWithRawValue, 8));
};


/** @param {proto.protocol.PbftViewChangeWithRawValue|undefined} value  */
proto.protocol.Pbft.prototype.setViewChangeWithRawvalue = function (value) {
    jspb.Message.setWrapperField(this, 8, value);
};


proto.protocol.Pbft.prototype.clearViewChangeWithRawvalue = function () {
    this.setViewChangeWithRawvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Pbft.prototype.hasViewChangeWithRawvalue = function () {
    return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 chain_id = 9;
 * @return {number}
 */
proto.protocol.Pbft.prototype.getChainId = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.protocol.Pbft.prototype.setChainId = function (value) {
    jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftEnv = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PbftEnv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftEnv.displayName = 'proto.protocol.PbftEnv';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftEnv.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftEnv.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftEnv} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftEnv.toObject = function (includeInstance, msg) {
        var f, obj = {
            pbft: (f = msg.getPbft()) && proto.protocol.Pbft.toObject(includeInstance, f),
            signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftEnv}
 */
proto.protocol.PbftEnv.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftEnv;
    return proto.protocol.PbftEnv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftEnv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftEnv}
 */
proto.protocol.PbftEnv.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.Pbft;
                reader.readMessage(value, proto.protocol.Pbft.deserializeBinaryFromReader);
                msg.setPbft(value);
                break;
            case 2:
                var value = new common_pb.Signature;
                reader.readMessage(value, common_pb.Signature.deserializeBinaryFromReader);
                msg.setSignature(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftEnv} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftEnv.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftEnv.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftEnv.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getPbft();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protocol.Pbft.serializeBinaryToWriter
        );
    }
    f = this.getSignature();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            common_pb.Signature.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftEnv} The clone.
 */
proto.protocol.PbftEnv.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftEnv} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Pbft pbft = 1;
 * @return {proto.protocol.Pbft}
 */
proto.protocol.PbftEnv.prototype.getPbft = function () {
    return /** @type{proto.protocol.Pbft} */ (
        jspb.Message.getWrapperField(this, proto.protocol.Pbft, 1));
};


/** @param {proto.protocol.Pbft|undefined} value  */
proto.protocol.PbftEnv.prototype.setPbft = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.PbftEnv.prototype.clearPbft = function () {
    this.setPbft(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftEnv.prototype.hasPbft = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Signature signature = 2;
 * @return {proto.protocol.Signature}
 */
proto.protocol.PbftEnv.prototype.getSignature = function () {
    return /** @type{proto.protocol.Signature} */ (
        jspb.Message.getWrapperField(this, common_pb.Signature, 2));
};


/** @param {proto.protocol.Signature|undefined} value  */
proto.protocol.PbftEnv.prototype.setSignature = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.PbftEnv.prototype.clearSignature = function () {
    this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.PbftEnv.prototype.hasSignature = function () {
    return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ValidatorSetV3 = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ValidatorSetV3.repeatedFields_, null);
};
goog.inherits(proto.protocol.ValidatorSetV3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ValidatorSetV3.displayName = 'proto.protocol.ValidatorSetV3';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ValidatorSetV3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ValidatorSetV3.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ValidatorSetV3.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ValidatorSetV3} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ValidatorSetV3.toObject = function (includeInstance, msg) {
        var f, obj = {
            validatorsList: jspb.Message.getField(msg, 1)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ValidatorSetV3}
 */
proto.protocol.ValidatorSetV3.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ValidatorSetV3;
    return proto.protocol.ValidatorSetV3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ValidatorSetV3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ValidatorSetV3}
 */
proto.protocol.ValidatorSetV3.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.getValidatorsList().push(value);
                msg.setValidatorsList(msg.getValidatorsList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ValidatorSetV3} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ValidatorSetV3.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ValidatorSetV3.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ValidatorSetV3.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getValidatorsList();
    if (f.length > 0) {
        writer.writeRepeatedString(
            1,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ValidatorSetV3} The clone.
 */
proto.protocol.ValidatorSetV3.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ValidatorSetV3} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string validators = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protocol.ValidatorSetV3.prototype.getValidatorsList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.protocol.ValidatorSetV3.prototype.setValidatorsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


proto.protocol.ValidatorSetV3.prototype.clearValidatorsList = function () {
    jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Validator = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.Validator.displayName = 'proto.protocol.Validator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.Validator.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.Validator.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.Validator} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.Validator.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: msg.getAddress(),
            pledgeCoinAmount: msg.getPledgeCoinAmount()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Validator}
 */
proto.protocol.Validator.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.Validator;
    return proto.protocol.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Validator}
 */
proto.protocol.Validator.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setPledgeCoinAmount(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Validator} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Validator.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Validator.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Validator.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getAddress();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getPledgeCoinAmount();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Validator} The clone.
 */
proto.protocol.Validator.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.Validator} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.Validator.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.protocol.Validator.prototype.setAddress = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 pledge_coin_amount = 2;
 * @return {number}
 */
proto.protocol.Validator.prototype.getPledgeCoinAmount = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.Validator.prototype.setPledgeCoinAmount = function (value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ValidatorSet = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ValidatorSet.repeatedFields_, null);
};
goog.inherits(proto.protocol.ValidatorSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.ValidatorSet.displayName = 'proto.protocol.ValidatorSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ValidatorSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.ValidatorSet.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.ValidatorSet.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.ValidatorSet} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.ValidatorSet.toObject = function (includeInstance, msg) {
        var f, obj = {
            validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
                proto.protocol.Validator.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ValidatorSet}
 */
proto.protocol.ValidatorSet.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.ValidatorSet;
    return proto.protocol.ValidatorSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ValidatorSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ValidatorSet}
 */
proto.protocol.ValidatorSet.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.Validator;
                reader.readMessage(value, proto.protocol.Validator.deserializeBinaryFromReader);
                msg.getValidatorsList().push(value);
                msg.setValidatorsList(msg.getValidatorsList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ValidatorSet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ValidatorSet.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ValidatorSet.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ValidatorSet.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getValidatorsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.protocol.Validator.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ValidatorSet} The clone.
 */
proto.protocol.ValidatorSet.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.ValidatorSet} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Validator validators = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Validator>}
 */
proto.protocol.ValidatorSet.prototype.getValidatorsList = function () {
    return /** @type{!Array.<!proto.protocol.Validator>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.Validator, 1));
};


/** @param {Array.<!proto.protocol.Validator>} value  */
proto.protocol.ValidatorSet.prototype.setValidatorsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protocol.ValidatorSet.prototype.clearValidatorsList = function () {
    this.setValidatorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PbftProof = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PbftProof.repeatedFields_, null);
};
goog.inherits(proto.protocol.PbftProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.PbftProof.displayName = 'proto.protocol.PbftProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PbftProof.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.PbftProof.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.PbftProof.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.PbftProof} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.PbftProof.toObject = function (includeInstance, msg) {
        var f, obj = {
            commitsList: jspb.Message.toObjectList(msg.getCommitsList(),
                proto.protocol.PbftEnv.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PbftProof}
 */
proto.protocol.PbftProof.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.PbftProof;
    return proto.protocol.PbftProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PbftProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PbftProof}
 */
proto.protocol.PbftProof.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protocol.PbftEnv;
                reader.readMessage(value, proto.protocol.PbftEnv.deserializeBinaryFromReader);
                msg.getCommitsList().push(value);
                msg.setCommitsList(msg.getCommitsList());
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PbftProof} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftProof.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PbftProof.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.PbftProof.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getCommitsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.protocol.PbftEnv.serializeBinaryToWriter
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.PbftProof} The clone.
 */
proto.protocol.PbftProof.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.PbftProof} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated PbftEnv commits = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.PbftEnv>}
 */
proto.protocol.PbftProof.prototype.getCommitsList = function () {
    return /** @type{!Array.<!proto.protocol.PbftEnv>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.protocol.PbftEnv, 1));
};


/** @param {Array.<!proto.protocol.PbftEnv>} value  */
proto.protocol.PbftProof.prototype.setCommitsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.protocol.PbftProof.prototype.clearCommitsList = function () {
    this.setCommitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.FeeConfig = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.FeeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protocol.FeeConfig.displayName = 'proto.protocol.FeeConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protocol.FeeConfig.prototype.toObject = function (opt_includeInstance) {
        return proto.protocol.FeeConfig.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protocol.FeeConfig} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.protocol.FeeConfig.toObject = function (includeInstance, msg) {
        var f, obj = {
            gasPrice: msg.getGasPrice(),
            baseReserve: msg.getBaseReserve()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.FeeConfig}
 */
proto.protocol.FeeConfig.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protocol.FeeConfig;
    return proto.protocol.FeeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.FeeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.FeeConfig}
 */
proto.protocol.FeeConfig.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setGasPrice(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setBaseReserve(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.FeeConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.FeeConfig.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.FeeConfig.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.FeeConfig.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getGasPrice();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = this.getBaseReserve();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.FeeConfig} The clone.
 */
proto.protocol.FeeConfig.prototype.cloneMessage = function () {
    return /** @type {!proto.protocol.FeeConfig} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 gas_price = 1;
 * @return {number}
 */
proto.protocol.FeeConfig.prototype.getGasPrice = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.protocol.FeeConfig.prototype.setGasPrice = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 base_reserve = 2;
 * @return {number}
 */
proto.protocol.FeeConfig.prototype.getBaseReserve = function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.protocol.FeeConfig.prototype.setBaseReserve = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.protocol.FeeConfig.Type = {
    UNKNOWN: 0,
    GAS_PRICE: 1,
    BASE_RESERVE: 2
};

/**
 * @enum {number}
 */
proto.protocol.PbftMessageType = {
    PBFT_TYPE_PREPREPARE: 0,
    PBFT_TYPE_PREPARE: 1,
    PBFT_TYPE_COMMIT: 2,
    PBFT_TYPE_VIEWCHANGE: 3,
    PBFT_TYPE_NEWVIEW: 4,
    PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE: 5
};

/**
 * @enum {number}
 */
proto.protocol.PbftValueType = {
    PBFT_VALUE_TX: 0,
    PBFT_VALUE_TXSET: 1
};

goog.object.extend(exports, proto.protocol);
